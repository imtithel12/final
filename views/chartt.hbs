<!DOCTYPE html>
<html lang="en">

<head>
    <title>Chart</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCliSdfYda_I-CwHZnGoxgg7RtxagFCc98&callback=initMap"
        async defer></script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCliSdfYda_I-CwHZnGoxgg7RtxagFCc98"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/ua-parser-js/0.7.28/ua-parser.min.js"></script>
    <script src="node_modules/ua-parser-js/dist/ua-parser.min.js"></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-gradient@0.1.1"></script>

    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
    <script
        src="https://cdnjs.cloudflare.com/ajax/libs/moment-timezone/0.5.34/moment-timezone-with-data.min.js"></script>

    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-doughnutlabel"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/flag-icon-css/3.5.0/js/flag-icon.min.js"></script>


    <style>
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/jquery/3.2.1/jquery.min.js');
        @import url('https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/js/bootstrap.bundle.min.js');
        @import url('https://cdn.jsdelivr.net/npm/bootstrap@5.0.1/dist/css/bootstrap.min.css');
        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap');
        @import url('https://cdn.jsdelivr.net/npm/boxicons@latest/css/boxicons.min.css');
        @import url('https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.0.3/css/font-awesome.css');

        a {
            text-decoration: none;
        }

        body {
            margin: 0;
            padding: 0;
            font-family: 'montserrat';
            background: rgb(240, 239, 239);
            background-attachment: fixed;
            background-size: 100% 633px;
        }



        .logo {
            padding: 20px;
            margin-left: 8%;
            width: 80%;
        }

        .souslogo {
            color: white;
            width: 180px;
            margin: 0 auto;
        }

        nav ul {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 250px;
            position: fixed;
            top: 0;
            left: 0;
            background-color: rgb(218, 112, 214);
        }

        nav ul li {
            list-style: none;
        }


        nav ul li a {
            display: block;
            text-decoration: none;
            text-transform: uppercase;
            font-size: 13px;
            color: white;
            position: relative;
            padding: 1px 0px 5px 25px;
            transition: all 0.5s;
        }

        nav ul li a::before {
            color: black;
            font-weight: bold;
            content: '';
            top: 0;
            right: 0;
            height: 100%;
            background-color: white;
            border-radius: 40px 0 0 40px;
            z-index: -1;
            transition: all 1s;
        }

        .activealways {
            color: #160216;
        }

        .active {
            color: #130112;
            border-left: 10px solid #c90ac2;
        }

        nav ul li a:before {
            content: '';
            position: absolute;
            top: 0;
            right: 0;
            height: 100%;
            background-color: white;
            border-radius: 40px 0 0 40px;
            z-index: -1;
            transition: all 1s;
        }

        nav ul li a:hover {
            color: #2b2626;
        }

        nav ul li a:hover:before {
            width: 95%;
        }

        .section {
            display: grid;
            place-items: center;
        }

        ////////////////////////////////////////////////////////////////////////
        .logo4 {}

        .wrapper {
            margin-left: 260px;
        }


        .profile:hover {
            color: black;
        }

        .profileicon {
            font-size: 200%;
            color: black;
        }

        .username {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            border: 2px solid #DA70D6;
            cursor: pointer;
            display: flex;
            justify-content: center;
            background-color: #7c0678;
            color: white;
            font-size: 20px;
        }

        .dropdown-content {
            display: none;
            position: absolute;
            min-width: 160px;
            z-index: 1;
            transition: all 2s;
            margin-bottom: 10%;
        }

        .dropdown-content a {
            text-decoration: none;
            display: block
        }

        .dropdown:hover .dropdown-content {
            display: block
        }

        .profile ul {
            background-color: #DA70D6;
            width: 200px;
            height: 230px;
            border-radius: 10px;
            right: 125px;
            top: 7px;
            position: absolute;
            padding: 8px;
            transition: all 0.5s;
            z-index: 1;
            margin-top: calc(-4%);
        }

        .profile ul::before {
            content: '';
            position: absolute;
            background-color: #DA70D6;
            height: 10px;
            width: 10px;
            top: -5px;
            right: 10px;
            transform: rotate(45deg)
        }

        .profile ul li {
            list-style: none;
            text-align: left;
            font-size: 15px;
            padding: 10px;
            display: flex;
            align-items: center;
            transition: all 0.5s;
            cursor: pointer;
            border-radius: 4px
        }

        .profile ul li:hover {
            background-color: #7c0678;
            border-radius: 4px
        }

        .profile ul li i {
            margin-right: 7px
        }

        .iprofile {
            color: white;
        }

        .profile {
            color: black;
            margin-top: calc(-5%);
            margin-left: 80%;
            font-family: sans-serif;
        }

        #liste {
            color: rgb(88, 88, 88);
            font-size: 15px;
            font-weight: bold;
            margin-left: 1%;
            font-family: cursive;
        }

        .boxsummaryall {
            background-color: transparent;
            border-radius: 5px;
            border: 1px solid transparent;
            height: 600px;
            padding-top: 1%;
        }

        .boxsummary1 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            height: 425px;
            width: 95%;
            float: left;
            margin-left: 1%;
            padding: 2%;
        }

        .boxvisiteursactivityall {
            background-color: transparent;
            border-radius: 5px;
            border: 1px solid transparent;
            margin-left: 1%;
            height: 625px;
            width: 98%;
        }

        .boxvisiteursactivity2 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            height: 600px;
            width: 97%;
        }

        .boxvisiteursactivity1 {
            background-color: transparent;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            height: 520px;
            width: 98%;
            float: left;
            margin-left: 1%;
        }

        #tableVisiteurs {
            width: 100%;
            border-collapse: collapse;
            font-family: sans-serif;
            font-size: 12px;
            border-spacing: 5px 1rem;
        }

        #tableVisiteurs th {
            border-top: 1px solid white;
            padding: 8px;
            text-align: left;
        }

        #tableVisiteurs tr {
            border-left: 1px solid white;
            border-right: 1px solid white;
            padding: 8px;
            text-align: left;
        }

        #tableVisiteurs td {
            padding: 8px;
            text-align: left;
        }

        #tableVisiteurs tbody tr:nth-child(even) {
            background-color: white;
        }

        #tableVisiteurs tbody tr:hover {
            background-color: white;
        }

        .chart-containeractivityvisteurs {
            height: 510px;
            overflow-y: scroll;
            position: relative;
        }

        .chart-containeractivityvisteurs::-webkit-scrollbar {
            width: 6px;
        }

        .chart-containeractivityvisteurs::-webkit-scrollbar-thumb {
            background-color: rgb(131, 131, 131);
            border-radius: 5px;
        }

        #tablePage {
            width: 100%;
            border-collapse: collapse;
            font-family: sans-serif;
            font-size: 12px;
            border-spacing: 5px 1rem;
        }

        #tablePage th {
            background-color: rgb(165, 149, 190);
            color: white;
            border-top: 1px solid white;
            padding: 8px;
            text-align: left;
        }

        #tablePage tr {
            border-left: 1px solid white;
            padding: 8px;
            text-align: left;
            border-right: 1px solid rgb(175, 174, 174);
        }

        #tablePage td {
            padding: 8px;
            text-align: left;
            border-bottom: 1px solid rgb(175, 174, 174);
        }

        #tablePage tbody tr:nth-child(even) {
            background-color: white;
        }

        #tablePage tbody tr:hover {
            background-color: white;
        }

        .chart-containertraficPage {
            width: 63.2%;
            height: 510px;
            overflow-y: scroll;
            position: relative;
        }

        .chart-containertraficPage::-webkit-scrollbar {
            width: 6px;
        }

        .chart-containertraficPage::-webkit-scrollbar-thumb {
            background-color: rgb(131, 131, 131);
            border-radius: 5px;
        }

        .box {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 23%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            float: left;
            margin-left: 1%;
            margin-top: 1%;
            text-align: center;
        }

        .box234 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 23%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            float: left;
            margin-left: 1%;
            margin-top: 1%;
            text-align: center;
        }

        .boxhoursdayall {
            background-color: transparent;
            border-radius: 5px;
            border: 1px solid transparent;
            height: 620px;
            margin-left: 1%;
            padding-top: 1%;
        }

        .boxhoursday1 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            height: 610px;
            margin-right: 4%;
            padding: 2%;
        }

        .box221 {
            background-image: url('./img/purple2.jpg');
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 40%;
            padding: 1%;
            font-family: cursive;
            font-size: 15px;
            color: white;
            margin-left: 10%;
            margin-top: 1%;
            text-align: center;
            float: left;
        }

        .box222 {
            background-image: url('./img/purple2.jpg');
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 40%;
            padding: 1%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(255, 255, 255);
            margin-left: 10%;
            margin-top: 1%;
            text-align: center;
            float: left;
        }

        .box22 {

            background-image: url('./img/purple2.jpg');
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 40%;
            padding: 1%;
            font-family: cursive;
            font-size: 15px;
            color: white;
            margin-left: 1%;
            margin-top: 1%;
            text-align: center;
            float: left;
        }

        .box23 {
            background-image: url('./img/purple2.jpg');
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 40%;
            padding: 1%;
            font-family: cursive;
            font-size: 15px;
            color: white;
            margin-left: 1%;
            margin-top: 1%;
            text-align: center;
            float: left;
        }

        .iconbox1 {
            font-size: 30px;
            color: white;
            background-color: rgba(255, 255, 255, 0.322);
            border: 2px solid rgba(255, 255, 255, 0.212);
            border-radius: 50%;
            padding: 2%;
        }

        .iconbox2 {
            font-size: 30px;
            color: white;
            background-color: rgba(255, 255, 255, 0.322);
            border: 2px solid rgba(255, 255, 255, 0.212);
            border-radius: 50%;
            padding: 2%;
            padding-left: 3%;
            padding-right: 3%;
        }

        .iconbox3 {
            font-size: 30px;
            color: white;
            background-color: rgba(255, 255, 255, 0.322);
            border: 2px solid rgba(255, 255, 255, 0.212);
            border-radius: 50%;
            padding: 2%;
            padding-left: 3%;
            padding-right: 3%;
        }

        .iconbox4 {
            font-size: 30px;
            color: white;
            background-color: rgba(255, 255, 255, 0.322);
            border: 2px solid rgba(255, 255, 255, 0.212);
            border-radius: 50%;
            padding: 2%;
            padding-left: 3%;
            padding-right: 3%;

        }

        .num1 {
            text-align: center;
            font-size: 15px;
            font-family: cursive;
            color: white;
            font-weight: bold;
        }

        #userAgentChart {
            margin-left: 10%;
        }

        .boxvisiteursall {
            background-color: transparent;
            border-radius: 5px;
            border: 1px solid transparent;
            height: 600px;
            margin-left: 1%;
            text-align: center;
        }

        .boxvisiteurs1 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            height: 560px;
            margin-right: 4%;
            padding: 1%;
            text-align: center;
        }

        .boxvisiteursdayall {
            background-color: transparent;
            border-radius: 5px;
            border: 1px solid transparent;
            height: 600px;
            margin-left: 1%;
            float: left;
            margin-top: calc(-3%);
        }

        .boxvisiteursday1 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            height: 600px;
            width: 510px;
            margin-right: 4%;
            padding: 1%;
        }

        .boxpageall {
            background-color: transparent;
            border-radius: 5px;
            border: 1px solid transparent;
            height: 620px;
            margin-left: 1%;
            padding-top: 1%;
        }

        .boxpage1 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            height: 610px;
            margin-right: 4%;
            padding: 2%;
        }

        .boxvisiteursmonthall {
            background-color: transparent;
            border-radius: 5px;
            border: 1px solid transparent;
            height: 600px;
            margin-left: 1%;
            float: left;
            margin-top: calc(-3%);
        }

        .boxvisiteursmonth1 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            height: 600px;
            width: 510px;
            margin-right: 4%;
            padding: 1%;
        }

        .boxvisiteursinformationsall {
            background-color: transparent;
            border-radius: 5px;
            border: 1px solid transparent;
            height: 600px;
            margin-left: 1%;
            text-align: center;
        }

        .boxvisiteursinformations1 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            height: 600px;
            margin-right: 4%;
            margin-top: 1%;
            padding: 1%;
            text-align: center;
        }

        .boxb {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 45%;
            height: 90%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 1%;
            margin-top: 1%;
            float: left;
        }

        .boximg {
            background-color: white;
            width: 50%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 1%;
            margin-top: 1%;
            float: left;
        }

        .accuielb {
            width: 69%;
        }

        .boxbt {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 50%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 1%;
            margin-top: 1%;
            float: left;
            height: 158px;
            overflow-y: scroll;
            position: relative;
            padding-right: calc(-10%);
        }

        .boxbt::-webkit-scrollbar {
            width: 6px;
        }

        .boxbt::-webkit-scrollbar-thumb {
            background-color: rgb(139, 139, 139);
            border-radius: 5px;
        }

        .boxv {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 45%;
            height: 90%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 1%;
            margin-top: 1%;
            float: left;
        }

        .boximgv {
            background-color: white;
            width: 50%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 1%;
            margin-top: 1%;
            float: left;
        }

        .accuielv {
            width: 69%;
        }

        .boxvt {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 50%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 1%;
            margin-top: 1%;
            float: left;
            height: 158px;
            overflow-y: scroll;
            position: relative;
            padding-right: calc(-10%);
        }

        .boxvt::-webkit-scrollbar {
            width: 6px;
        }

        .boxvt::-webkit-scrollbar-thumb {
            background-color: rgb(139, 139, 139);
            border-radius: 5px;
        }

        .box {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 23%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 1%;
            margin-top: 1%;
            text-align: center;
        }

        .box1 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 48%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 1%;
            margin-top: 1%;
            text-align: center;
            float: left;
        }

        .box111 {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 48%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 25%;
            margin-top: 1%;
            text-align: center;
            float: left;
        }

        .box5hours {
            width: 50%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            float: left;
        }

        .box5hoursall {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            margin-left: 1%;
            margin-right: 1%;
            margin-top: 1%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);

            height: 350px;
        }

        #trafficChart1 {
            float: left;
            margin: 1%;
        }

        .visitors {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
        }

        .visitorscercle {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 50%;
            font-family: cursive;
            font-size: 15px;
            color: gray;
            float: left;
            margin-left: 3%;
            margin-top: 1%;

        }

        .num {
            text-align: center;
            font-size: 40px;
            font-family: cursive;
            color: rgb(71, 71, 71);
        }

        .div.active {
            color: black;
        }

        .nav_link.active {
            color: black;
        }

        .url {
            text-align: left;
            color: #f557f5;
            font-family: cursive;
        }

        #trafficTable {
            width: 100%;
            border-collapse: collapse;
        }

        #trafficTable th,
        #trafficTable td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        #trafficTable th {
            background-color: white;
        }

        #trafficTable tbody tr:nth-child(even) {
            background-color: #f2f2f2;
        }

        #trafficTable tbody tr:hover {
            background-color: #ddd;
        }

        .chart-containerr {
            height: 165px;
            overflow-y: scroll;
            position: relative;
        }

        .chart-containerr::-webkit-scrollbar {
            width: 6px;
        }

        .chart-containerr::-webkit-scrollbar-thumb {
            background-color: rgb(139, 139, 139);
            border-radius: 5px;
        }


        .box11 {
            border-bottom: 3px solid rgba(255, 206, 86, 1)
        }

        .box2 {
            border-bottom: 3px solid rgba(255, 99, 132, 1);
        }

        .box3 {
            border-bottom: 3px solid rgb(218, 112, 214);
        }

        .box4 {
            border-bottom: 3px solid rgba(54, 162, 235, 1);
        }

        .visiteurs2 {
            text-align: center;
            background-color: rgb(218, 112, 214);
            border: 12px solid rgb(240, 239, 239);
            border-radius: 200px;
            border-top-left-radius: 500px;
            border-bottom-right-radius: 300px;
            width: 97%;
        }


        .imgvisiteurs {
            margin-top: calc(-15.5%);
            margin-left: 70%;
            width: 20%;
        }

        #liste {
            text-align: left;
        }

        .souslogo {
            background-image: linear-gradient(rgba(241, 241, 247, 0.5), rgba(255, 255, 255, 0.24)), url('');
            position: relative;
            border-radius: 50% 50% 50% 50% / 60% 60% 40% 40%;
            text-align: center;
            margin-top: 1%;
        }



        .accuiel {
            background-color: #f57fef54;
            border-radius: 50%;
        }

        .iconbox {
            background-color: ;
        }

        .cerclehalftop {
            font-size: 60px;
            color: #fc05c6;
        }

        .cerclehalfmin {
            font-size: 60px;
            color: rgb(224, 9, 243);
        }

        .boxpagee {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 98%;
            padding: 2%;
            font-family: cursive;
            font-size: 15px;
            color: rgb(71, 71, 71);
            margin-left: 1%;
            margin-top: 1%;
            text-align: center;
        }

        .boxpage {
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            width: 35%;
            margin-left: 10%;
            float: left;
        }

        .leftt {
            float: left;
            margin-left: 20%;
        }

        /////////////////////////////////////////////////////////////////
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');


        :root {
            --c-theme-primary: #008FFD;
            --c-theme-primary-accent: #CBE8FF;
            --c-bg-primary: #D6DAE0;
            --c-bg-secondary: #EAEBEC;
            --c-bg-tertiary: #FDFDFD;
            --c-text-primary: #1F1F25;
            --c-text-secondary: #999FA6;
        }

        button {
            font: inherit;
            cursor: pointer;

            &:focus {
                outline: 0;
            }
        }


        .datepicker {
            width: 95%;
            max-width: 350px;
            background-color: var(--c-bg-tertiary);
            border-radius: 10px;
            box-shadow: 0 0 2px 0 rgba(#000, .2), 0 5px 10px 0 rgba(#000, .1);
            padding: 1rem;
        }

        .datepicker-top {
            margin-bottom: 1rem;
        }

        .btn-group {
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 1rem;
            margin-top: -.5rem;
        }

        .tag {
            margin-right: .5rem;
            margin-top: .5rem;
            border: 0;
            background-color: var(--c-bg-secondary);
            border-radius: 10px;
            padding: .5em .75em;
            font-weight: 600;
        }

        .month-selector {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .arrow {
            display: flex;
            align-items: center;
            justify-content: center;
            border: 0;
            background-color: #FFF;
            border-radius: 12px;
            width: 2.5rem;
            height: 2.5rem;
            box-shadow: 0 0 2px 0 rgba(#000, .25), 0 0 10px 0 rgba(#000, .15);
        }

        .month-name {
            font-weight: 600;
        }

        .datepicker-calendar {
            display: grid;
            grid-template-columns: repeat(7, 1fr);
            grid-row-gap: 1rem;
        }

        .day,
        .date {
            justify-self: center;
        }

        .day {
            color: var(--c-text-secondary);
            font-size: .875em;
            font-weight: 500;
            justify-self: center;
        }

        .date {
            border: 0;
            padding: 0;
            width: 2.25rem;
            height: 2.25rem;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            font-weight: 600;
            border: 2px solid transparent;
            background-color: transparent;
            cursor: pointer;

            &:focus {
                outline: 0;
                color: var(--c-theme-primary);
                border: 2px solid var(--c-theme-primary-accent);
            }
        }

        .faded {
            color: var(--c-text-secondary);
        }

        .current-day {
            color: #FFF;
            border-color: var(--c-theme-primary);
            background-color: var(--c-theme-primary);

            &:focus {
                background-color: var(--c-theme-primary-accent);
            }
        }

        .imgsouslogo {
            margin-top: calc(-50%);
            width: 25%;
            margin-left: calc(-10%);
        }

        .boxsummaryy {
            background-color: white;
            border-radius: 5px;
            border: 1px solid rgb(218, 218, 218);
            margin-top: 28%;
            margin-left: 10%;
            height: 230px;
            width: 81%;
            padding-bottom: 1%;
        }

        .word1 {
            background-color: #c556f1;
            border-radius: 50%;
            color: #c556f1;
            position: absolute;
            margin-top: calc(-16%);
            margin-left: 40%;
            font-family: cursive;
            font-size: 15px;
            width: 4%;
            height: 8%;
        }

        .word11 {
            position: absolute;
            margin-top: calc(-15%);
            margin-left: 44%;
            font-family: cursive;
            font-size: 15px;
            width: 7%;
            height: 12%;
        }

        .word2 {
            background-color: #CF77F1;
            border-radius: 50%;
            color: #c556f1;
            position: absolute;
            margin-top: calc(-12.5%);
            margin-left: 44.5%;
            font-family: cursive;
            font-size: 15px;
            width: 4%;
            height: 8%;
        }

        .word12 {
            position: absolute;
            margin-top: calc(-11.5%);
            margin-left: 49.5%;
            font-family: cursive;
            font-size: 15px;
        }

        .word3 {
            background-color: #d98df7;
            border-radius: 50%;
            color: #c556f1;
            position: absolute;
            margin-top: calc(-7.5%);
            margin-left: 44.5%;
            font-family: cursive;
            font-size: 15px;
            width: 4%;
            height: 8%;
        }

        .word13 {
            position: absolute;
            margin-top: calc(-6.5%);
            margin-left: 49.5%;
            font-family: cursive;
            font-size: 15px;
        }

        .word4 {
            background-color: #E3B1F8;
            border-radius: 50%;
            color: #c556f1;
            position: absolute;
            margin-top: calc(-4%);
            margin-left: 40%;
            font-family: cursive;
            font-size: 15px;
            width: 4%;
            height: 8%;
        }

        .word14 {
            position: absolute;
            margin-top: calc(-3%);
            margin-left: 45%;
            font-family: cursive;
            font-size: 15px;
        }
    </style>

</head>

<body>
    <script>
        document.addEventListener("DOMContentLoaded", function (event) {
            const showNavbar = (toggleId, navId, bodyId, headerId) => {
                const toggle = document.getElementById(toggleId),
                    nav = document.getElementById(navId),
                    bodypd = document.getElementById(bodyId),
                    headerpd = document.getElementById(headerId)

                // Validate that all variables exist
                if (toggle && nav && bodypd && headerpd) {
                    toggle.addEventListener('click', () => {
                        // show navbar
                        nav.classList.toggle('show')
                        // change icon
                        toggle.classList.toggle('bx-x')
                        // add padding to body
                        bodypd.classList.toggle('body-pd')
                        // add padding to header
                        headerpd.classList.toggle('body-pd')
                    })
                }
            }

            showNavbar('header-toggle', 'nav-bar', 'body-pd', 'header')

            /*===== LINK ACTIVE =====*/
            const linkColor = document.querySelectorAll('.nav_link')

            function colorLink() {
                if (linkColor) {
                    linkColor.forEach(l => l.classList.remove('active'))
                    this.classList.add('active')
                }
            }
            linkColor.forEach(l => l.addEventListener('click', colorLink))

            // Function to change link color on scroll
            function changeColorOnScroll() {
                const divs = document.querySelectorAll('div[id^="div"]');
                const scrollPosition = window.scrollY + window.innerHeight / 2;

                divs.forEach(div => {
                    if (scrollPosition >= div.offsetTop && scrollPosition < div.offsetTop + div.offsetHeight) {
                        linkColor.forEach(l => l.classList.remove('active'));
                        const correspondingLink = document.querySelector(`.nav_link[href="#${div.id}"]`);
                        if (correspondingLink) {
                            correspondingLink.classList.add('active');
                        }
                    }
                });
            }

            // Attach scroll event listener to change link color
            window.addEventListener('scroll', changeColorOnScroll);

            // Call the function initially to set the link color on page load
            changeColorOnScroll();

            // Function to handle link clicks
            function handleLinkClick(event) {
                event.preventDefault(); // Prevent default link behavior

                const targetId = this.getAttribute('href').substring(1); // Get target div id
                const targetDiv = document.getElementById(targetId); // Get target div
                const offsetTop = targetDiv.offsetTop; // Get offset top of target div

                // Scroll to target div smoothly
                window.scrollTo({
                    top: offsetTop,
                    behavior: 'smooth'
                });

                // Change link color when clicked
                linkColor.forEach(l => l.classList.remove('active'));
                this.classList.add('active');
            }

            // Attach click event listener to links
            linkColor.forEach(l => l.addEventListener('click', handleLinkClick));

            // Function to restore original color when leaving divs
            function restoreOriginalColor() {
                const currentScroll = window.scrollY + window.innerHeight / 2;
                const divs = document.querySelectorAll('div[id^="div"]');

                divs.forEach(div => {
                    if (currentScroll < div.offsetTop || currentScroll >= div.offsetTop + div.offsetHeight) {
                        const correspondingLink = document.querySelector(`.nav_link[href="#${div.id}"]`);
                        if (correspondingLink) {
                            correspondingLink.classList.remove('active');
                        }
                    }
                });
            }

            // Attach scroll event listener to restore original color
            window.addEventListener('scroll', restoreOriginalColor);
        });
    </script>

    <nav>
        <ul>
            <a href="/">
                <img class="logo" alt="drawing" src=".\img\logo3.png">
            </a>
            <hr class="souslogo">
            <li><a href="/"><i class="fa fa-home"></i>&nbsp; Home</a></li>
            <li><a href="/projets"><i class="fa fa-arrow-left" aria-hidden="true"></i>&nbsp; Projets</a></li>
            <li><a href="#div" class=" nav_link sous linkToDiv">Trafic du Site Web</a></li>
            <li><a href="#div1" class=" nav_link sous linkToDiv">Trafic du Site Web: Mensuel</a></li>
            <li><a href="#div2" class=" nav_link sous linkToDiv">Trafic du Site Web: Quotidien</a></li>
            <li><a href="#div50" class=" nav_link sous linkToDiv">Visiteurs</a></li>
            <li><a href="#div4" class=" nav_link sous linkToDiv">Activité des Visiteurs</a></li>
            <li><a href="#div5" class=" nav_link sous linkToDiv">Informations Visiteurs</a></li>
            <li><a href="#div14" class=" nav_link sous linkToDiv">Localisations</a> </li>
            <li><a href="#div15" class=" nav_link sous linkToDiv">Les Pays les Plus Suivies</a> </li>
            <li><a href="#div6" class=" nav_link sous linkToDiv">Systèmes</a></li>
            <li><a href="#div7" class=" nav_link sous linkToDiv">Languages</a></li>
            <li><a href="#div8" class=" nav_link sous linkToDiv">Pages</a> </li>
            <li><a href="#div9" class=" nav_link sous linkToDiv">Trafic des Pages</a> </li>
            <li><a href="#div10" class=" nav_link sous linkToDiv">Plus/Moins Visiteurs</a> </li>
            <li><a href="#div11" class=" nav_link sous linkToDiv">Plus/Moins Vues</a> </li>
            <li><a href="#div12" class=" nav_link sous linkToDiv">Plus/Moins Clicks</a> </li>
            <li><a href="#div16" class=" nav_link sous linkToDiv">Sessions/Durée</a> </li>
            <li><a href="#div13" class=" nav_link sous linkToDiv">Les Cinq Dernières Heures (Sessions || Durée)</a>
            </li>
            <br><br>
            <div class="souslogo">
                <img class="imgsouslogo" src="./img/souslogo.png">
            </div>
        </ul>
    </nav>

    <div class="wrapper" id="div">
        {{#each urls}}
        <h5 class="url"><strong>{{titre}}:</strong></h5>
        <h6><i class="fa fa-angle-right"></i><i class="fa fa-angle-right"></i> {{url}}</h6>
        {{/each}}

        <div class="dropdown profile">
            <div class="profile">
                <div class="username"><b>{{client.first_letter}}</b></div>
                <div class="dropdown-content">
                    <ul>
                        <li>
                            <i class='bx bx-user iprofile'></i>
                            <span>
                                <form action="/projets" method="GET">
                                    <button class="nav-link fw-bold py-1 px-0 btn p=3 text-white"
                                        type="submit">Projets</button>

                                </form>
                            </span>
                        </li>
                        <li>
                            <i class='bx bx-cog iprofile'></i>
                            <span>
                                <form action="/profile" method="Get">
                                    <button class="nav-link fw-bold py-1 px-0 btn p=3 text-white"
                                        type="submit">Profile</button>

                                </form>
                            </span>
                        </li>
                        <li>
                            <i class='bx bx-cog iprofile'></i>
                            <span>
                                <form action="/logout" method="POST">
                                    <button class="nav-link fw-bold py-1 px-0 btn p=3 text-white"
                                        type="submit">Help</button>

                                </form>
                            </span>
                        </li>
                        <li>
                            <i class='bx bx-log-in-circle iprofile'></i>
                            <span>
                                <form action="/logout" method="POST">
                                    <button class="nav-link fw-bold py-1 px-0 btn p=3 text-white"
                                        type="submit">Logout</button>

                                </form>
                            </span>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <br>
        <div class="boxvisiteursall">
            <div class="boxvisiteurs1">
                <p id="liste">Trafic du Site Web en Générale</p>
                <div class="box221">
                    <i class="fa fa-users iconbox1" aria-hidden="true"></i>
                    <br>
                    Visiteurs Totales: <br><span class="num1" id="viteurstotales"></span>
                </div>
                <div class="box22">
                    <i class="fa fa-file-text iconbox2" aria-hidden="true"></i>
                    <br>
                    Pages Visitées Totales: <br><span class="num1" id="visitsDataCount"></span>
                </div>
                <div class="box222">
                    <i class="fa fa-hourglass iconbox3" aria-hidden="true"></i>
                    <br>
                    Sessions Totales: <br><span class="num1" id="uniquePagesVisitedDataCount"></span>
                </div>
                <div class="box23">
                    <i class="fa fa-clock-o iconbox4" aria-hidden="true"></i>
                    <br>
                    Durées Totales: <br><span class="num1" id="durationDataCount"></span>
                </div>

                <div class="boxsummary boxsummaryy">
                    <canvas id="userAgentChart" width="600" height="200"></canvas>
                </div>
                <div class="word1">1</div>
                <div class="word11">Visiteurs</div>
                <div class="word2"></div>
                <div class="word12">Pages Visitées</div>
                <div class="word3"></div>
                <div class="word13">Sessions</div>
                <div class="word4"></div>
                <div class="word14">Durées</div>
                <script src="chart1.js"></script>
            </div>
        </div>
    </div><br>

    <div class="wrapper" id="div1">
        <div class="section">
            <div class="box-area">
                <div class="boxsummaryall">
                    <style>
                        /* Style pour le select */
                        select[name="months1"] {
                            width: 200px;
                            padding: 8px;
                            border: 1px solid #ccc;
                            border-radius: 5px;
                            font-size: 16px;
                        }
                    </style>
                    <div class="boxsummary1">
                        <p id="liste">Trafic du Site Web Mensuel</p>
                        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                        <select name="months1" id="months1">
                            {{#each months}}
                            <option value="{{this.value}}" {{#if this.selected}}selected{{/if}}>
                                {{this.name}}
                            </option>
                            {{/each}}
                        </select>
                        <div class="boxsummary">
                            <canvas id="trafficChart11" width="600" height="200"></canvas>
                        </div>

                        <script>
                            function convertSecondsToHMS_Months(seconds) {
                                const hours = Math.floor(seconds / 3600);
                                const minutes = Math.floor((seconds % 3600) / 60);
                                const remainingSeconds = seconds % 60;

                                return `${hours}h ${minutes}m ${remainingSeconds}s`;
                            }

                            function fetchChart11Data_Months(month) {
                                const urlParams = new URLSearchParams(window.location.search);
                                const trackingId = urlParams.get('trackingId');
                                const currentYear = new Date().getFullYear();

                                if (!trackingId) {
                                    console.error('Aucun tracking_id trouvé dans l\'URL.');
                                    return;
                                }

                                // Effectuer la requête avec les paramètres du mois sélectionné
                                fetch(`/chart1?trackingId=${trackingId}&month=${month}&year=${currentYear}`)
                                    .then(response => response.json())
                                    .then(data => {
                                        // Traiter les données de la première requête
                                        const labels = data.results.map(item => item.full_date);
                                        const totalUserAgentsData = data.results.map(item => item.unique_userAgent);
                                        const uniquePagesVisitedData = data.results.map(item => item.unique_pages_visited);
                                        const visitsData = data.results.map(item => item.count);
                                        const durationInSecondsData = data.results.map(item => item.duration_in_seconds);
                                        const durationData = data.results.map(item => item.duration);

                                        // Traiter les données de la deuxième requête
                                        const totalUserAgentsData1 = data.results2.map(item => item.unique_userAgent1);
                                        const uniquePagesVisitedData1 = data.results2.map(item => item.unique_pages_visited1);

                                        // Mettre à jour le graphique avec les nouvelles données
                                        const ctx = document.getElementById('trafficChart11').getContext('2d');
                                        const gradient1 = createGradient(ctx, ['rgb(219, 13, 238)', 'rgb(255, 255, 255)', 'rgba(219, 13, 238, 0.466)']);
                                        const gradient2 = createGradient(ctx, ['rgb(219, 13, 238)', 'rgb(255, 255, 255)', 'rgba(219, 13, 238, 0.466)']);
                                        const gradient3 = createGradient(ctx, ['rgb(219, 13, 238)', 'rgb(255, 255, 255)', 'rgba(219, 13, 238, 0.466)']);
                                        const gradient4 = createGradient(ctx, ['rgb(219, 13, 238)', 'rgb(255, 255, 255)', 'rgba(219, 13, 238, 0.466)']);


                                        if (window.myChart_Months !== undefined) {
                                            window.myChart_Months.destroy(); // Détruire le graphique existant pour le reconstruire avec les nouvelles données
                                        }
                                        window.myChart_Months = new Chart(ctx, {
                                            type: 'line',
                                            data: {
                                                labels: labels,
                                                datasets: [{
                                                    label: 'Visiteurs',
                                                    data: totalUserAgentsData,
                                                    backgroundColor: 'rgba(255, 207, 86, 0.322)',
                                                    borderColor: 'rgba(255, 206, 86, 1)',
                                                    borderWidth: 2,
                                                    fill: true,
                                                    tension: 0.4
                                                }, {
                                                    label: 'Pages Visitées',
                                                    data: uniquePagesVisitedData,
                                                    backgroundColor: 'rgba(255, 99, 133, 0.267)',
                                                    borderColor: 'rgba(255, 99, 132, 1)',
                                                    borderWidth: 2,
                                                    fill: true,
                                                    tension: 0.4
                                                }, {
                                                    label: 'Sessions',
                                                    data: visitsData,
                                                    backgroundColor: 'rgba(218, 112, 214, 0.384)',
                                                    borderColor: 'rgb(218, 112, 214)',
                                                    borderWidth: 2,
                                                    fill: true,
                                                    tension: 0.4,
                                                }, {
                                                    label: 'Durée (seconde)',
                                                    data: durationInSecondsData,
                                                    backgroundColor: 'rgba(54, 163, 235, 0.226)',
                                                    borderColor: 'rgba(54, 162, 235, 1)',
                                                    borderWidth: 2,
                                                    fill: true,
                                                    tension: 0.4
                                                }]
                                            },
                                            options: {
                                                scales: {
                                                    y: {
                                                        beginAtZero: true
                                                    }
                                                }
                                            }
                                        });

                                        const totalCount1 = totalUserAgentsData1.reduce((acc, curr) => acc + curr, 0);
                                        document.getElementById('totalCount1').innerText = totalCount1;

                                        const totalCount2 = uniquePagesVisitedData1.reduce((acc, curr) => acc + curr, 0);
                                        document.getElementById('totalCount2').innerText = totalCount2;

                                        const totalCount3 = visitsData.reduce((acc, curr) => acc + curr, 0);
                                        document.getElementById('totalCount3').innerText = totalCount3;

                                        const totalCountInSeconds = durationData.reduce((acc, curr) => acc + curr, 0);
                                        const formattedTotalDuration = convertSecondsToHMS_Months(totalCountInSeconds);
                                        document.getElementById('totalCount4').innerText = formattedTotalDuration;

                                    })
                                    .catch(error => {
                                        console.error('Une erreur s\'est produite:', error);
                                        // Ajouter un message d'erreur à l'utilisateur
                                        document.getElementById('error-message').innerText = "Une erreur s'est produite lors du chargement des données.";
                                    });
                            }





                            function createGradient(ctx, colors) {
                                const gradient = ctx.createLinearGradient(0, 200, 0, 400);
                                gradient.addColorStop(0, colors[0]);
                                gradient.addColorStop(0.5, colors[1]);
                                gradient.addColorStop(1, colors[2]);
                                return gradient;
                            }



                            document.addEventListener('DOMContentLoaded', () => {
                                // Récupérer la valeur initiale du mois
                                const selected = document.getElementById('months1').value;
                                fetchChart11Data_Months(selected);

                                // Gestionnaire d'événements pour le changement de mois sélectionné
                                document.getElementById('months1').addEventListener('change', (event) => {
                                    const selected = event.target.value;
                                    fetchChart11Data_Months(selected);
                                });
                            });

                        </script>
                    </div>
                    <div class="box box11">
                        Visiteurs Totales: <br><span class="num" id="totalCount1"></span>
                    </div>
                    <div class="box box2">
                        Pages Visitées Totales: <br><span class="num" id="totalCount2"></span>
                    </div>
                    <div class="box box3">
                        Sessions Totales: <br><span class="num" id="totalCount3"></span>
                    </div>
                    <div class="box box4">
                        Durée Sessions Totales: <br><span class="num" id="totalCount4"></span>
                    </div>
                </div>
            </div>
        </div>
    </div><br>

    <div class="wrapper" id="div2">
        <div class="boxhoursdayall">
            <div class="boxhoursday1">
                <p id="liste">Trafic du Site Web Quotidien</p>
                <div id="date-selectors">
                    <style>
                        /* Style pour le select */
                        select[name="months2"] {
                            width: 75px;
                            padding: 8px;
                            border: 1px solid #ccc;
                            border-radius: 5px;
                            font-size: 16px;
                        }
                    </style>
                    <table>
                        <tr>
                            <td>
                                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            </td>
                            <td><select name="months2" id="dayi1"></select></td>
                            <td><select name="months2" id="monthi1"></select></td>
                            <td><select name="months2" id="yeari1"></select></td>
                        </tr>
                    </table>
                </div>
                <div id="chart-container">
                    <canvas id="trafficChart41" width="600" height="200"></canvas>
                </div>
                <script>
                    document.addEventListener('DOMContentLoaded', () => {
                        const currentDate = new Date();
                        const currentDay = currentDate.getDate();
                        const currentMonth = currentDate.getMonth() + 1; // getMonth() returns 0-indexed months
                        const currentYear = currentDate.getFullYear();

                        // Remplir les sélecteurs de date avec les options appropriées
                        populateSelectNew('dayi1', 1, 31, currentDay);
                        populateSelectNew('monthi1', 1, 12, currentMonth);
                        populateSelectNew('yeari1', 2020, 2030, currentYear);

                        // Ajouter des écouteurs d'événements change aux sélecteurs de date
                        document.getElementById('dayi1').addEventListener('change', fetchChartNewData);
                        document.getElementById('monthi1').addEventListener('change', fetchChartNewData);
                        document.getElementById('yeari1').addEventListener('change', fetchChartNewData);

                        // Afficher les données du jour actuel au chargement de la page
                        fetchChartNewData();
                    });

                    function fetchChartNewData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        const selectedDay = document.getElementById('dayi1').value;
                        const selectedMonth = document.getElementById('monthi1').value;
                        const selectedYear = document.getElementById('yeari1').value;

                        const labels = [];
                        for (let hour = 0; hour < 24; hour++) {
                            labels.push(`${hour}:00`);
                        }

                        fetch(`/chart4?trackingId=${trackingId}&dayi=${selectedDay}&monthi=${selectedMonth}&yeari=${selectedYear}`)
                            .then(response => response.json())
                            .then(data => {
                                // Initialiser les tableaux de données
                                const visitsData = new Array(24).fill(0);
                                const uniquePagesVisitedData = new Array(24).fill(0);
                                const durationInSecondsData = new Array(24).fill(0);
                                const totalUserAgentsData = new Array(24).fill(0);
                                const totalNewUserAgentsData = new Array(24).fill(0);

                                data.forEach(item => {
                                    const hour = item.hour_of_day;
                                    visitsData[hour] += item.count;
                                    uniquePagesVisitedData[hour] += item.unique_pages_visited;
                                    durationInSecondsData[hour] += item.duration_in_seconds;
                                    totalUserAgentsData[hour] += item.unique_userAgent;
                                    totalNewUserAgentsData[hour] += item.new_userAgents_today;
                                });

                                // Récupérer le graphique existant ou créer un nouveau
                                const ctx = document.getElementById('trafficChart41').getContext('2d');
                                if (window.myChartNew !== undefined) {
                                    window.myChartNew.destroy(); // Détruire le graphique existant pour le reconstruire avec les nouvelles données
                                }
                                window.myChartNew = new Chart(ctx, {
                                    type: 'line',
                                    data: {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Visiteurs',
                                            data: totalUserAgentsData,
                                            backgroundColor: 'rgba(255, 207, 86, 0.322)',
                                            borderColor: 'rgba(255, 206, 86, 1)',
                                            borderWidth: 2,
                                            fill: true,
                                            tension: 0.4
                                        }, {
                                            label: 'Pages Visitées',
                                            data: uniquePagesVisitedData,
                                            backgroundColor: 'rgba(218, 112, 214, 0.384)',
                                            borderColor: 'rgb(218, 112, 214)',
                                            borderWidth: 2,
                                            fill: true,
                                            tension: 0.4
                                        }, {
                                            label: 'Sessions',
                                            data: visitsData,
                                            backgroundColor: 'rgba(255, 99, 133, 0.267)',
                                            borderColor: 'rgba(255, 99, 132, 1)',
                                            borderWidth: 2,
                                            fill: true,
                                            tension: 0.4,
                                        }, {
                                            label: 'Durée (seconde)',
                                            data: durationInSecondsData,
                                            backgroundColor: 'rgba(54, 163, 235, 0.226)',
                                            borderColor: 'rgba(54, 162, 235, 1)',
                                            borderWidth: 2,
                                            fill: true,
                                            tension: 0.4
                                        }]
                                    },
                                    options: {
                                        scales: {
                                            y: {
                                                beginAtZero: true
                                            }
                                        }
                                    }
                                });
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });
                    }

                    function populateSelectNew(id, start, end, selected) {
                        const select = document.getElementById(id);
                        select.innerHTML = '';
                        for (let i = start; i <= end; i++) {
                            const option = document.createElement('option');
                            option.value = i;
                            option.textContent = i;
                            if (i === selected) {
                                option.selected = true;
                            }
                            select.appendChild(option);
                        }
                    }
                </script>

                <div id="chart-containerr" class="chart-containerr">
                    <table id="trafficTable">
                        <thead>
                            <tr>
                                <th>Heure</th>
                                <th>Utilisateurs</th>
                                <th>Pages Visitées</th>
                                <th>Sessions</th>
                                <th>Durée (seconde)</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Les données seront insérées ici par JavaScript -->
                        </tbody>
                    </table>
                </div>
                <script>
                    document.addEventListener('DOMContentLoaded', () => {
                        const currentDate = new Date();
                        const currentDay = currentDate.getDate();
                        const currentMonth = currentDate.getMonth() + 1; // getMonth() returns 0-indexed months
                        const currentYear = currentDate.getFullYear();

                        // Remplir les sélecteurs de date avec les options appropriées
                        populateSelect('dayi1', 1, 31, currentDay);
                        populateSelect('monthi1', 1, 12, currentMonth);
                        populateSelect('yeari1', 2020, 2030, currentYear);

                        // Ajouter des écouteurs d'événements change aux sélecteurs de date
                        document.getElementById('dayi1').addEventListener('change', fetchChart14Data);
                        document.getElementById('monthi1').addEventListener('change', fetchChart14Data);
                        document.getElementById('yeari1').addEventListener('change', fetchChart14Data);

                        // Afficher les données du jour actuel au chargement de la page
                        fetchChart14Data();
                    });

                    function fetchChart14Data() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        const selectedDay = document.getElementById('dayi1').value;
                        const selectedMonth = document.getElementById('monthi1').value;
                        const selectedYear = document.getElementById('yeari1').value;

                        fetch(`/chart4?trackingId=${trackingId}&dayi=${selectedDay}&monthi=${selectedMonth}&yeari=${selectedYear}`)
                            .then(response => response.json())
                            .then(data => {
                                const tableBody = document.getElementById('trafficTable').querySelector('tbody');
                                tableBody.innerHTML = ''; // Effacer le contenu précédent du tableau

                                data.forEach(item => {
                                    const row = document.createElement('tr');
                                    row.innerHTML = `
                    <td>${item.hour_of_day}:00</td>
                    <td>${item.unique_userAgent}</td>
                    <td>${item.unique_pages_visited}</td>
                    <td>${item.count}</td>
                    <td>${item.duration_in_seconds}</td>
                `;
                                    tableBody.appendChild(row);
                                });
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });
                    }

                    function populateSelect(id, start, end, selected) {
                        const select = document.getElementById(id);
                        select.innerHTML = '';
                        for (let i = start; i <= end; i++) {
                            const option = document.createElement('option');
                            option.value = i;
                            option.textContent = i;
                            if (i === selected) {
                                option.selected = true;
                            }
                            select.appendChild(option);
                        }
                    }
                </script>

            </div>
        </div>
        <br>
    </div><br><br><br>

    <div class="wrapper">
        <div class="boxvisiteursdayall" id="div50"><br>
            <div class="boxvisiteursday1">
                <p id="liste">Visiteurs Quotidien</p>
                <div id="date-selectors2">
                    <style>
                        /* Style pour le select */
                        select[name="months22"] {
                            width: 75px;
                            padding: 8px;
                            border: 1px solid #ccc;
                            border-radius: 20px;
                            font-size: 14px;
                            text-align: right;
                        }
                    </style>
                    <table>
                        <tr>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            </td>
                            <td><select name="months22" id="dayi12"></select></td>
                            <td><select name="months22" id="monthi12"></select></td>
                            <td><select name="months22" id="yeari12"></select></td>
                        </tr>
                    </table>
                </div>
                <div id="chart-container2">
                    <canvas id="trafficChart412" width="600" height="200"></canvas>
                </div>
                <div class="box111">
                    Visiteurs Totales: <br><span class="num" id="totalCount433"></span>
                </div>

                <div class="box1 purple">
                    Visiteurs Récurrents: <br><span class="num" id="totalCount434"></span>
                </div>
                <div class="box1 pink">
                    Neauveaux Visiteurs: <br><span class="num" id="totalCount432"></span>
                </div>
                <script>
                    document.addEventListener('DOMContentLoaded', () => {
                        const currentDate2 = new Date();
                        const currentDay2 = currentDate2.getDate();
                        const currentMonth2 = currentDate2.getMonth() + 1; // getMonth() returns 0-indexed months
                        const currentYear2 = currentDate2.getFullYear();

                        // Remplir les sélecteurs de date avec les options appropriées
                        populateSelect22('dayi12', 1, 31, currentDay2);
                        populateSelect22('monthi12', 1, 12, currentMonth2);
                        populateSelect22('yeari12', 2020, 2030, currentYear2);


                        // Ajouter des écouteurs d'événements change aux sélecteurs de date
                        document.getElementById('dayi12').addEventListener('change', fetchChart42Data);
                        document.getElementById('monthi12').addEventListener('change', fetchChart42Data);
                        document.getElementById('yeari12').addEventListener('change', fetchChart42Data);

                        // Afficher les données du jour actuel au chargement de la page
                        fetchChart42Data();
                    });

                    function fetchChart42Data() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        const selectedDay2 = document.getElementById('dayi12').value;
                        const selectedMonth2 = document.getElementById('monthi12').value;
                        const selectedYear2 = document.getElementById('yeari12').value;

                        fetch(`/chart42?trackingId=${trackingId}&dayi2=${selectedDay2}&monthi2=${selectedMonth2}&yeari2=${selectedYear2}`)
                            .then(response => response.json())
                            .then(data => {

                                // Récupérer les libellés à partir des données du serveur
                                const labels = data.map(item => item.full_date);
                                const totalUserAgentsData = data.map(item => item.unique_userAgent);
                                const totalNewUserAgentsData = data.map(item => item.new_userAgents_today);
                                const totalReturningUserAgentsData = data.map(item => item.returning_userAgent);

                                // Récupérer le graphique existant ou créer un nouveau
                                const ctx = document.getElementById('trafficChart412').getContext('2d');
                                if (window.myChart !== undefined) {
                                    window.myChart.destroy(); // Détruire le graphique existant pour le reconstruire avec les nouvelles données
                                }
                                window.myChart = new Chart(ctx, {
                                    type: 'bar',
                                    data: {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Visiteurs Totales',
                                            data: totalUserAgentsData,
                                            backgroundColor: 'rgba(255, 207, 86, 0.322)',
                                            borderColor: 'rgba(255, 206, 86, 1)',
                                            borderWidth: 2,
                                            fill: false,
                                            tension: 0.4
                                        }, {
                                            label: 'Visiteurs Récurrents',
                                            data: totalReturningUserAgentsData,
                                            backgroundColor: 'rgba(218, 112, 214, 0.397)',
                                            borderColor: 'rgb(218, 112, 214)',
                                            borderWidth: 2,
                                            fill: false,
                                            tension: 0.4
                                        }, {
                                            label: 'Neauveaux Visiteurs',
                                            data: totalNewUserAgentsData,
                                            backgroundColor: 'rgba(255, 0, 255, 0.37)',
                                            borderColor: 'rgb(255, 0, 255)',
                                            borderWidth: 2,
                                            fill: false,
                                            tension: 0.4
                                        }]
                                    },
                                    options: {
                                        scales: {
                                            y: {
                                                beginAtZero: true
                                            }
                                        }
                                    }
                                });
                                const totalCount433 = totalUserAgentsData.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCount433').innerText = totalCount433;
                                const totalCount432 = totalNewUserAgentsData.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCount432').innerText = totalCount432;
                                const totalCount434 = totalReturningUserAgentsData.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCount434').innerText = totalCount434;
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });
                    }

                    function populateSelect22(id2, start2, end2, selected2) {
                        const select2 = document.getElementById(id2); // Utilisation de id2 au lieu de id pour éviter les conflits
                        select2.innerHTML = '';
                        for (let i = start2; i <= end2; i++) {
                            const option2 = document.createElement('option'); // Utilisation de 'option' au lieu de 'option2'
                            option2.value = i;
                            option2.textContent = i;
                            if (i === selected2) {
                                option2.selected = true; // Correction de 'option.selected2' en 'option2.selected'
                            }
                            select2.appendChild(option2);
                        }
                    }

                </script>
            </div>
        </div>
        <div class="boxvisiteursmonthall"><br>
            <div class="boxvisiteursmonth1">
                <p id="liste">Visiteurs Mensuel</p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                <style>
                    /* Style pour le select */
                    select[class="months2m"] {
                        width: 100px;
                        padding: 8px;
                        border: 1px solid #ccc;
                        border-radius: 20px;
                        font-size: 14px;
                        text-align: right;
                    }
                </style>
                <select name="months2" id="months2" class="months2m">
                    {{#each months}}
                    <option value="{{this.value}}" {{#if this.selected}}selected{{/if}}>
                        {{this.name}}
                    </option>
                    {{/each}}
                </select>
                <div class="boxsummary">
                    <canvas id="trafficChart2" width="600" height="200"></canvas>
                </div>

                <script>
                    function convertSecondsToHMS_AnotherMonths(seconds) {
                        const hours = Math.floor(seconds / 3600);
                        const minutes = Math.floor((seconds % 3600) / 60);
                        const remainingSeconds = seconds % 60;

                        return `${hours}h ${minutes}m ${remainingSeconds}s`;
                    }

                    function fetchData_AnotherMonths(month) {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');
                        const currentYear = new Date().getFullYear();

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        // Effectuer la requête avec les paramètres du mois sélectionné
                        fetch(`/chartnew?trackingId=${trackingId}&month=${month}&year=${currentYear}`)
                            .then(response => response.json())
                            .then(data => {
                                // Traiter les données de la première requête
                                const labels = data.results.map(item => item.month);
                                const totalUserAgentsData = data.results.map(item => item.unique_userAgent);
                                const totalNewUserAgentsData = data.results.map(item => item.new_userAgents_today);
                                const totalReturningUserAgentsData = data.results.map(item => item.returning_userAgent);

                                // Mettre à jour le graphique avec les nouvelles données
                                const ctx = document.getElementById('trafficChart2').getContext('2d');
                                if (window.myChart_AnotherMonths !== undefined) {
                                    window.myChart_AnotherMonths.destroy(); // Détruire le graphique existant pour le reconstruire avec les nouvelles données
                                }
                                window.myChart_AnotherMonths = new Chart(ctx, {
                                    type: 'bar',
                                    data: {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Visiteurs Totales',
                                            data: totalUserAgentsData,
                                            backgroundColor: 'rgba(255, 207, 86, 0.322)',
                                            borderColor: 'rgba(255, 206, 86, 1)',
                                            borderWidth: 2,
                                            fill: true,
                                            tension: 0.4
                                        }, {
                                            label: 'Visiteurs Récurrents',
                                            data: totalReturningUserAgentsData,
                                            backgroundColor: 'rgba(218, 112, 214, 0.397)',
                                            borderColor: 'rgb(218, 112, 214)',
                                            borderWidth: 2,
                                            fill: false,
                                            tension: 0.4
                                        }, {
                                            label: 'Nouveaux Visiteurs',
                                            data: totalNewUserAgentsData,
                                            backgroundColor: 'rgba(255, 0, 255, 0.37)',
                                            borderColor: 'rgb(255, 0, 255)',
                                            borderWidth: 2,
                                            fill: true,
                                            tension: 0.4
                                        }]
                                    },
                                    options: {
                                        scales: {
                                            y: {
                                                beginAtZero: true
                                            }
                                        }
                                    }
                                });

                                const totalCountnew = totalUserAgentsData.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCountnew').innerText = totalCountnew;

                                const totalCountnew2 = totalNewUserAgentsData.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCountnew2').innerText = totalCountnew2;

                                const totalCountnew33 = totalReturningUserAgentsData.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCountnew33').innerText = totalCountnew33;

                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite:', error);
                                // Ajouter un message d'erreur à l'utilisateur
                                document.getElementById('error-message').innerText = "Une erreur s'est produite lors du chargement des données.";
                            });
                    }

                    document.addEventListener('DOMContentLoaded', () => {
                        // Récupérer la valeur initiale du mois
                        const selected = document.getElementById('months2').value;
                        fetchData_AnotherMonths(selected);

                        // Gestionnaire d'événements pour le changement de mois sélectionné
                        document.getElementById('months2').addEventListener('change', (event) => {
                            const selected = event.target.value;
                            fetchData_AnotherMonths(selected);
                        });
                    });
                </script>


                <div class="box111">
                    Visiteurs Totales: <br><span class="num" id="totalCountnew"></span>
                </div>
                <div class="box1 purple">
                    Visiteurs Récurrents: <br><span class="num" id="totalCountnew33"></span>
                </div>
                <div class="box1 pink">
                    Neauveaux Visiteurs: <br><span class="num" id="totalCountnew2"></span>
                </div>
            </div>
        </div>
        <br><br><br><br><br><br><br><br><br>
    </div><br><br><br>

    <div class="wrapper">
        <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
        <div class="boxvisiteursactivityall" id="div4"><br>
            <div class="boxvisiteursactivity2"><br>
                <p id="liste">Activité des visiteurs</p>
                <div class="boxvisiteursactivity1">
                    <div class="chart-containeractivityvisteurs">
                        <table id="tableVisiteurs">
                            <tbody>
                                <!-- Les données seront insérées ici par JavaScript -->
                            </tbody>
                        </table>
                    </div>
                    <script src="chartvisiteurs.js"></script>
                </div>
            </div>
        </div>
    </div><br><br><br>

    <div class="wrapper" id="div5">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">Informations Visiteurs</p>
                <style>
                    #userAgentTable {
                        width: 100%;
                        border-collapse: collapse;
                        font-family: sans-serif;
                        font-size: 12px;
                        border-spacing: 5px 1rem;
                    }

                    #userAgentTable tr {
                        border-bottom: 6px solid white;
                        border-left: 50px solid white;
                        border-right: 50px solid white;
                        text-align: left;
                    }

                    #userAgentTable td {
                        width: 1%;
                    }

                    .chart-containerinformationvisteurs {
                        width: 50%;
                        height: 525px;
                        overflow-y: scroll;
                        position: relative;
                        border: 1px solid rgb(218, 218, 218);
                        border-radius: 5px;
                    }

                    .chart-containerinformationvisteurs::-webkit-scrollbar {
                        width: 6px;
                    }

                    .chart-containerinformationvisteurs::-webkit-scrollbar-thumb {
                        background-color: rgb(131, 131, 131);
                        border-radius: 5px;
                    }

                    .browser-icon,
                    .extra-icon {
                        width: 50px;
                        height: 50px;
                        background-color: #f7aaf4;
                        border: 1px solid #f7aaf4;
                        border-radius: 50%;
                        padding: 2%;
                    }

                    .detailsCell {
                        font-size: 15px;
                    }

                    .info {
                        margin-top: 2%;
                        position: absolute;
                        background-color: #f7aaf4;
                        border-radius: 50%;
                    }
                </style>
                <img class="info" src="./img/info.webp">
                <div class="chart-containerinformationvisteurs">
                    <table id="userAgentTable">
                        <tbody></tbody>
                    </table>
                </div>

                <script>
                    const browserImages = {
                        'chrome': './img/chrome.png',
                        'firefox': './img/firefox.png',
                        'safari': './img/safari.png',
                        'edge': './img/edge.png',
                        'opera': './img/opera.png',
                        'internet explorer': './img/internet-explorer.png',
                        'unknown': './img/unknown.png'
                    };

                    function fetchChartVisiteursinData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        const countryTranslation = {
                            'السعودية': 'Arabie Saoudite',
                            'الإمارات': 'Émirats Arabes Unis',
                            'مصر': 'Égypte',
                            'المغرب': 'Maroc',
                            'الجزائر': 'Algérie',
                            'تونس': 'Tunisie',
                            'العراق': 'Irak',
                            'لبنان': 'Liban',
                            'الأردن': 'Jordanie',
                            'سوريا': 'Syrie',
                            // Ajoutez d'autres traductions si nécessaire
                        };

                        fetch(`/chartvisiteursin?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                const tableBody = document.querySelector('#userAgentTable tbody');
                                tableBody.innerHTML = ''; // Clear existing rows

                                data.forEach(item => {
                                    const row = document.createElement('tr');
                                    const combinedCell = document.createElement('td');

                                    const extraCell = document.createElement('td');
                                    extraCell.innerHTML = '&nbsp;&nbsp;';

                                    const detailsCell = document.createElement('td');
                                    detailsCell.classList.add('detailsCell');
                                    const browserImg = document.createElement('img');
                                    const extraImg = document.createElement('img');

                                    const country = countryTranslation[item.country] || item.country || 'Inconnu';
                                    const ipAddress = item.ip_address || 'Inconnu';
                                    const browserName = item.browser || 'Inconnu';

                                    // Set browser image
                                    switch (browserName.toLowerCase()) {
                                        case 'chrome':
                                            browserImg.src = browserImages.chrome;
                                            break;
                                        case 'firefox':
                                            browserImg.src = browserImages.firefox;
                                            break;
                                        case 'safari':
                                            browserImg.src = browserImages.safari;
                                            break;
                                        case 'edge':
                                            browserImg.src = browserImages.edge;
                                            break;
                                        case 'opera':
                                            browserImg.src = browserImages.opera;
                                            break;
                                        case 'internet explorer':
                                            browserImg.src = browserImages['internet explorer'];
                                            break;
                                        default:
                                            browserImg.src = browserImages.unknown;
                                            break;
                                    }

                                    browserImg.alt = browserName;
                                    browserImg.width = 24; // Set appropriate width
                                    browserImg.height = 24; // Set appropriate height

                                    // Use innerHTML to format the content
                                    detailsCell.innerHTML = `
                    ${ipAddress} <br> 
                    <strong>${country}</strong> <br> 
                    ${browserName} 
                `;
                                    detailsCell.appendChild(browserImg);

                                    extraImg.src = './img/info.webp';
                                    extraImg.alt = 'Extra';
                                    extraImg.classList.add('extra-icon');
                                    extraCell.appendChild(extraImg);

                                    row.appendChild(extraCell);
                                    row.appendChild(detailsCell);
                                    tableBody.appendChild(row);
                                });
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });
                    }

                    document.addEventListener('DOMContentLoaded', fetchChartVisiteursinData);
                </script>

            </div>
            <br>
        </div><br>
    </div><br><br><br>

    <div class="wrapper" id="div14">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">Localisations</p>
                <style>
                    #map {
                        width: 500px;
                        /* Largeur de la carte */
                        height: 600px;
                        /* Hauteur de la carte */
                        border: 1px solid #ccc;
                    }

                    .country-name {
                        color: rgb(255, 0, 212);
                        font-weight: bold;
                    }
                </style>
                <div id="map" style="width: 100%; height: 440px;"></div>
                <script>
                    function fetchChartVisiteursinnData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        fetch(`/chartvisiteursin2?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                // Créer une carte Leaflet
                                const map = L.map('map').setView([0, 0], 2);

                                // Ajouter une couche de tuiles
                                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                                }).addTo(map);

                                // Collecter les coordonnées de tous les pays
                                const allCoordinates = [];
                                data.forEach(item => {
                                    const { latitude, longitude, country } = item;
                                    allCoordinates.push([latitude, longitude, country]);
                                });

                                // Fonction pour générer des points intermédiaires courbés comme des parenthèses
                                function generateCurvedPoints(start, end, curvature = 0.3, numPoints = 50) {
                                    const latDiff = end[0] - start[0];
                                    const lngDiff = end[1] - start[1];
                                    const points = [];

                                    for (let i = 0; i <= numPoints; i++) {
                                        const t = i / numPoints;
                                        const t2 = (1 - Math.cos(Math.PI * t)) / 2;  // courbure comme parenthèses
                                        const lat = start[0] + t * latDiff;
                                        const lng = start[1] + t * lngDiff + curvature * Math.sin(Math.PI * t);
                                        points.push([lat, lng]);
                                    }

                                    return points;
                                }

                                // Fonction pour générer un dégradé de couleur entre deux couleurs
                                function getGradientColor(startColor, endColor, steps) {
                                    const start = startColor.match(/\w\w/g).map(c => parseInt(c, 16));
                                    const end = endColor.match(/\w\w/g).map(c => parseInt(c, 16));
                                    const stepFactor = 1 / (steps - 1);
                                    const gradient = [];

                                    for (let i = 0; i < steps; i++) {
                                        const r = Math.round(start[0] + stepFactor * i * (end[0] - start[0]));
                                        const g = Math.round(start[1] + stepFactor * i * (end[1] - start[1]));
                                        const b = Math.round(start[2] + stepFactor * i * (end[2] - start[2]));
                                        gradient.push(`#${r.toString(16).padStart(2, '0')}${g.toString(16).padStart(2, '0')}${b.toString(16).padStart(2, '0')}`);
                                    }

                                    return gradient;
                                }

                                // Couleurs pour le dégradé
                                const startColor = '#7c0678';
                                const endColor = '#f77ff3';
                                const gradientColors = getGradientColor(startColor, endColor, allCoordinates.length);

                                // Dessiner une ligne courbée reliant tous les pays
                                let curvedCoordinates = [];
                                for (let i = 0; i < allCoordinates.length - 1; i++) {
                                    const startPoint = allCoordinates[i];
                                    const endPoint = allCoordinates[i + 1];
                                    const segment = generateCurvedPoints(startPoint, endPoint);

                                    // Ajouter chaque segment de ligne courbée avec une couleur du dégradé
                                    const polyline = L.polyline(segment, {
                                        color: gradientColors[i],
                                        weight: 5
                                    }).addTo(map);
                                }

                                // Ajouter des marqueurs pour chaque pays
                                data.forEach(item => {
                                    const { latitude, longitude, country } = item;
                                    const popupContent = `<b>Pays:</b> <span class="country-name">${country}</span>`;
                                    L.marker([latitude, longitude]).addTo(map)
                                        .bindPopup(popupContent);
                                });
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });
                    }

                    document.addEventListener('DOMContentLoaded', fetchChartVisiteursinnData);
                </script>

                <style>
                    #visitorsTable {
                        width: 100%;
                        border-collapse: collapse;
                        font-family: sans-serif;
                        font-size: 12px;
                        border-spacing: 5px 1rem;
                    }

                    #visitorsTable tr {
                        border-left: 2px solid white;
                        border-right: 2px solid white;
                        height: 50%;
                    }

                    #visitorsTable td {
                        background-color: white;
                        border-right: 1px solid rgb(185, 185, 185);
                        width: 1%;
                        text-align: center;
                        font-size: 14px;
                    }

                    .chart-containerlocavisteurs {
                        width: 100%;
                        height: 15%;
                        overflow-x: scroll;
                        position: relative;
                        border: 1px solid rgb(218, 218, 218);
                        border-radius: 5px;
                        margin-top: 1%;
                    }

                    .chart-containerlocavisteurs::-webkit-scrollbar {
                        width: 6px;
                    }

                    .chart-containerlocavisteurs::-webkit-scrollbar-thumb {
                        background-color: rgb(131, 131, 131);
                        border-radius: 5px;
                    }
                </style>

                <div class="chart-containerlocavisteurs">
                    <table id="visitorsTable">
                        <thead>
                            <!-- Les en-têtes de tableau sont ajoutés directement par le script -->
                        </thead>
                        <tbody id="visitorsTableBody">
                            <!-- Les lignes de données seront ajoutées ici par JavaScript -->
                        </tbody>
                    </table>
                </div>


                <script>
                    function fetchChartVisiteursin21Data() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        fetch(`/chartvisiteursin2?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                const countryTranslation = {
                                    'السعودية': 'Arabie Saoudite',
                                    'الإمارات': 'Émirats Arabes Unis',
                                    'مصر': 'Égypte',
                                    'المغرب': 'Maroc',
                                    'الجزائر': 'Algérie',
                                    'تونس': 'Tunisie',
                                    'العراق': 'Irak',
                                    'لبنان': 'Liban',
                                    'الأردن': 'Jordanie',
                                    'سوريا': 'Syrie',
                                    // Ajoutez d'autres traductions si nécessaire
                                };

                                const countryCounts = {};
                                data.forEach(item => {
                                    const country = countryTranslation[item.country] || item.country || 'Inconnu';
                                    if (!countryCounts[country]) {
                                        countryCounts[country] = 0;
                                    }
                                    countryCounts[country]++;
                                });

                                // Calculer le nombre total de visiteurs
                                const totalVisitors = Object.values(countryCounts).reduce((sum, count) => sum + count, 0);

                                // Convertir les nombres de visiteurs en pourcentages
                                const countryPercentages = {};
                                Object.keys(countryCounts).forEach(country => {
                                    countryPercentages[country] = (countryCounts[country] / totalVisitors * 100).toFixed(2);
                                });

                                // Trier les pays par pourcentage de visiteurs
                                const sortedCountries = Object.entries(countryPercentages).sort((a, b) => b[1] - a[1]);

                                // Créer les lignes du tableau HTML
                                const countryRow = document.createElement('tr');
                                const percentageRow = document.createElement('tr');

                                sortedCountries.forEach(([country, percentage]) => {
                                    const countryCell = document.createElement('td');
                                    const percentageCell = document.createElement('td');

                                    countryCell.textContent = country;
                                    percentageCell.textContent = `${percentage}%`;

                                    countryRow.appendChild(countryCell);
                                    percentageRow.appendChild(percentageCell);
                                });

                                const tableBody = document.getElementById('visitorsTableBody');
                                tableBody.appendChild(countryRow);
                                tableBody.appendChild(percentageRow);
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });


                    }

                    document.addEventListener('DOMContentLoaded', fetchChartVisiteursin21Data);
                </script>


            </div>
        </div>
    </div><br><br><br>

    <div class="wrapper" id="div15">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">Les Pays les Plus Suivies</p>
                <style>
                    #userAgentTable {
                        width: 100%;
                        border-collapse: collapse;
                        font-family: sans-serif;
                        font-size: 12px;
                        border-spacing: 5px 1rem;
                    }

                    #userAgentTable tr {
                        border-bottom: 6px solid white;
                        border-left: 50px solid white;
                        border-right: 50px solid white;
                        text-align: left;
                    }

                    #userAgentTable td {
                        width: 1%;
                    }

                    .chart-containerinformationvisteurs {
                        width: 50%;
                        height: 525px;
                        overflow-y: scroll;
                        position: relative;
                        border: 1px solid rgb(218, 218, 218);
                        border-radius: 5px;
                    }

                    .chart-containerinformationvisteurs::-webkit-scrollbar {
                        width: 6px;
                    }

                    .chart-containerinformationvisteurs::-webkit-scrollbar-thumb {
                        background-color: rgb(131, 131, 131);
                        border-radius: 5px;
                    }

                    .browser-icon,
                    .extra-icon {
                        width: 50px;
                        height: 50px;
                        background-color: #f7aaf4;
                        border: 1px solid #f7aaf4;
                        border-radius: 50%;
                        padding: 2%;
                    }

                    .detailsCell {
                        font-size: 15px;
                    }

                    .infoloca {
                        width: 10%;
                    }

                    .boxvisiteursinformations11 {

                        background-color: white;
                        border-radius: 5px;
                        border: 1px solid rgb(218, 218, 218);
                        height: 430px;
                        margin-right: 4%;
                        padding: 1%;
                        text-align: center;
                    }
                </style>
                <img class="infoloca" src="./img/loca2.png">


                <div class="boxvisiteursinformations11"><br><br>
                    <canvas id="visitorsChart" width="600" height="200"></canvas>
                </div>

                <script>
                    function fetchChartVisiteursin2Data() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        const countryTranslation = {
                            'السعودية': 'Arabie Saoudite',
                            'الإمارات': 'Émirats Arabes Unis',
                            'مصر': 'Égypte',
                            'المغرب': 'Maroc',
                            'الجزائر': 'Algérie',
                            'تونس': 'Tunisie',
                            'العراق': 'Irak',
                            'لبنان': 'Liban',
                            'الأردن': 'Jordanie',
                            'سوريا': 'Syrie',
                            // Ajoutez d'autres traductions si nécessaire
                        };

                        fetch(`/chartvisiteursin2?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                const countryCounts = {};
                                data.forEach(item => {
                                    const country = countryTranslation[item.country] || item.country || 'Inconnu';
                                    if (!countryCounts[country]) {
                                        countryCounts[country] = 0;
                                    }
                                    countryCounts[country]++;
                                });

                                // Trier les pays par nombre de visiteurs
                                const sortedCountries = Object.entries(countryCounts).sort((a, b) => b[1] - a[1]);
                                // Sélectionner les dix premiers pays
                                const topTenCountries = sortedCountries.slice(0, 10);
                                const totalVisitors = Object.values(countryCounts).reduce((sum, count) => sum + count, 0);

                                const labels = [];
                                const percentages = [];
                                topTenCountries.forEach(([country, count]) => {
                                    const percentage = ((count / totalVisitors) * 100).toFixed(2);
                                    labels.push(`${country}`);
                                    percentages.push(percentage);
                                });

                                // Créer le graphique
                                const ctx = document.getElementById('visitorsChart').getContext('2d');
                                const visitorsChart = new Chart(ctx, {
                                    type: 'bar',
                                    data: {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Pourcentage de visiteurs',
                                            data: percentages,
                                            backgroundColor: '#c556f16e',
                                            borderColor: '#c556f1',
                                            borderWidth: 1
                                        }]
                                    },
                                    options: {
                                        scales: {
                                            y: {
                                                display: false
                                            }
                                        },
                                        plugins: {
                                            legend: {
                                                display: false
                                            },
                                            tooltip: {
                                                callbacks: {
                                                    label: function (context) {
                                                        return `${context.parsed.y}% des visiteurs`;
                                                    }
                                                }
                                            },
                                            datalabels: {
                                                anchor: 'end',
                                                align: 'start',
                                                formatter: function (value) {
                                                    return value + '%';
                                                },
                                                color: '#000',
                                                font: {
                                                    weight: 'bold',
                                                    size: 12
                                                },
                                                backgroundColor: 'rgba(235, 133, 248, 0.7)',
                                                borderRadius: 3,
                                                padding: 4
                                            }
                                        }
                                    },
                                    plugins: [ChartDataLabels]
                                });
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });
                    }

                    document.addEventListener('DOMContentLoaded', fetchChartVisiteursin2Data);
                </script>




            </div>
            <br>
        </div><br>
    </div><br><br><br>

    <div class="wrapper" id="div6">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">Systèmes</p>
                <div class="boxb">
                    <canvas id="trafficChart9" width="600" height="200"></canvas>
                    <script src="chart9.js"></script>
                </div>
                <div class="boxbt">
                    <style>
                        .browser-table {
                            width: 100%;
                            border-collapse: collapse;
                        }

                        .browser-table tr {
                            border-bottom: 1px solid #f392f0;
                        }

                        .browser-table th,
                        .browser-table td {
                            padding: 8px;
                            text-align: left;
                        }


                        .browser-table td1 {
                            color: rgb(231, 96, 227);
                            font-weight: bold;
                        }

                        .browser-table th {
                            font-weight: bold;
                            color: #e760e3;
                        }

                        .browser-table tbody tr:nth-child(odd) {
                            background-color: #f9f9f9;
                        }

                        .browser-table td:nth-child(2) {
                            text-align: right;
                        }
                    </style>
                    <div id="tableBrowsers">
                        <!-- Tableau sera inséré ici -->
                    </div>

                    <script>
                        function fetchChart9bData() {
                            const urlParams = new URLSearchParams(window.location.search);
                            const trackingId = urlParams.get('trackingId');

                            if (!trackingId) {
                                console.error('Aucun tracking_id trouvé dans l\'URL.');
                                return;
                            }

                            fetch(`/chart9?trackingId=${trackingId}`)
                                .then(response => response.json())
                                .then(data => {
                                    if (!data || data.length === 0) {
                                        console.error('Les données sont vides ou non définies.');
                                        return;
                                    }

                                    const browsers = [...new Set(data.map(item => item.browser))]; // Obtenez les navigateurs uniques
                                    const countsByBrowser = {};

                                    browsers.forEach(browser => {
                                        countsByBrowser[browser] = 0;
                                    });

                                    data.forEach(item => {
                                        if (item.browser && countsByBrowser[item.browser] !== undefined) { // Vérifier si item.browser est défini
                                            countsByBrowser[item.browser] += item.unique_userAgent;
                                        }
                                    });

                                    const totalUsers = Object.values(countsByBrowser).reduce((acc, curr) => acc + curr, 0);

                                    const percentages = {};
                                    Object.entries(countsByBrowser).forEach(([browser, count]) => {
                                        const percentage = (count / totalUsers) * 100;
                                        if (!isNaN(percentage) && percentage !== 0) { // Vérifier si le pourcentage est un nombre valide
                                            percentages[browser] = percentage;
                                        }
                                    });

                                    // Sélection de la table HTML existante dans le document
                                    const tableContainer = document.getElementById('tableBrowsers');

                                    // Création de la structure de table HTML
                                    const table = document.createElement('table');
                                    table.classList.add('browser-table');

                                    // En-tête de la table
                                    const headerRow = document.createElement('tr');
                                    const headerCell1 = document.createElement('th');
                                    headerCell1.textContent = 'Navigateurs';
                                    headerRow.appendChild(headerCell1);
                                    table.appendChild(headerRow);

                                    // Lignes de données
                                    Object.entries(percentages).forEach(([browser, percentage]) => {
                                        const row = document.createElement('tr');
                                        const cell1 = document.createElement('td');
                                        cell1.textContent = browser;
                                        row.appendChild(cell1);
                                        const cell2 = document.createElement('td');
                                        cell2.textContent = `${percentage.toFixed(2)}%`;
                                        row.appendChild(cell2);
                                        table.appendChild(row);
                                    });

                                    // Ajouter la table au conteneur
                                    tableContainer.appendChild(table);
                                })
                                .catch(error => {
                                    console.error('Une erreur s\'est produite:', error);
                                });

                        }

                        document.addEventListener('DOMContentLoaded', () => {
                            fetchChart9bData();
                        });
                    </script>
                </div>
                <div class="boximg"><img class="accuielb" src="./img/accuiel.avif"></div>
            </div>
        </div>
    </div><br><br><br><br>

    <div class="wrapper">
        <div class="boxvisiteursinformationsall" id="div7">
            <div class="boxvisiteursinformations1">
                <p id="liste">Languages</p>
                <div class="boxv">
                    <canvas id="trafficChart10" width="600" height="200"></canvas>
                    <script src="chart10.js"></script>
                </div>
                <div class="boxvt">
                    <style>
                        .language-table {
                            width: 100%;
                            border-collapse: collapse;
                        }

                        .language-table tr {
                            border-bottom: 1px solid #f392f0;
                        }

                        .language-table th,
                        .language-table td {
                            padding: 8px;
                            text-align: left;
                        }


                        .language-table td1 {
                            color: rgb(231, 96, 227);
                            font-weight: bold;
                        }

                        .language-table th {
                            font-weight: bold;
                            color: #e760e3;
                        }

                        .language-table tbody tr:nth-child(odd) {
                            background-color: #f9f9f9;
                        }

                        .language-table td:nth-child(2) {
                            text-align: right;
                        }
                    </style>
                    <div id="tableLanguages">
                        <!-- Tableau sera inséré ici -->
                    </div>
                    <script>
                        function fetchChart10vData() {
                            const urlParams = new URLSearchParams(window.location.search);
                            const trackingId = urlParams.get('trackingId');

                            if (!trackingId) {
                                console.error('Aucun tracking_id trouvé dans l\'URL.');
                                return;
                            }

                            fetch(`/chart10?trackingId=${trackingId}`)
                                .then(response => response.json())
                                .then(data => {
                                    // Calcul du nombre total d'utilisateurs
                                    const totalUsers = data.reduce((sum, item) => sum + item.user_count, 0);

                                    // Création du tableau HTML
                                    const tableContainer = document.getElementById('tableLanguages');
                                    const table = document.createElement('table');
                                    table.classList.add('language-table');

                                    // En-tête du tableau
                                    const headerRow = document.createElement('tr');
                                    const headerCell1 = document.createElement('th');
                                    headerCell1.textContent = 'Languages';
                                    headerRow.appendChild(headerCell1);
                                    table.appendChild(headerRow);

                                    // Lignes de données
                                    data.forEach(item => {
                                        const row = document.createElement('tr');
                                        const cell1 = document.createElement('td');
                                        cell1.textContent = item.language;
                                        row.appendChild(cell1);
                                        const cell2 = document.createElement('td');
                                        const percentage = (item.user_count / totalUsers) * 100;
                                        cell2.textContent = `${percentage.toFixed(2)}%`;
                                        row.appendChild(cell2);
                                        table.appendChild(row);
                                    });

                                    // Ajout du tableau au conteneur
                                    tableContainer.appendChild(table);
                                })
                                .catch(error => {
                                    console.error('Une erreur s\'est produite:', error);
                                });
                        }

                        document.addEventListener('DOMContentLoaded', () => {
                            fetchChart10vData();
                        });

                    </script>
                </div>
                <div class="boximgv"><br><br><img class="accuielv" src="./img/accuielv.png"></div>
            </div>
        </div>
    </div><br><br><br><br>

    <div class="wrapper">
        <div class="boxvisiteursdayall" id="div8"><br>
            <div class="boxvisiteursday1">
                <p id="liste">Pages Visitées Quotidien</p>
                <div id="date-selectors2p">
                    <style>
                        /* Style pour le select */
                        select[name="months22p"] {
                            width: 75px;
                            padding: 8px;
                            border: 1px solid #ccc;
                            border-radius: 20px;
                            font-size: 14px;
                            text-align: right;
                        }
                    </style>
                    <table>
                        <tr>
                            <td>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                            </td>
                            <td><select name="months22p" id="dayi12p"></select></td>
                            <td><select name="months22p" id="monthi12p"></select></td>
                            <td><select name="months22p" id="yeari12p"></select></td>
                        </tr>
                    </table>
                </div>
                <div id="chart-container2p">
                    <canvas id="trafficChart412p" width="600" height="200"></canvas>
                </div>

                <div class="box111">
                    Pages Totales: <br><span class="num" id="totalCount433p"></span>
                </div>

                <div class="box1 purple">
                    Pages Visitées Récurrents: <br><span class="num" id="totalCount434p"></span>
                </div>
                <div class="box1 pink">
                    Neauveaux Pages Visitées: <br><span class="num" id="totalCount432p"></span>
                </div>
                <script>
                    document.addEventListener('DOMContentLoaded', () => {
                        const currentDate2p = new Date();
                        const currentDay2p = currentDate2p.getDate();
                        const currentMonth2p = currentDate2p.getMonth() + 1; // getMonth() returns 0-indexed months
                        const currentYear2p = currentDate2p.getFullYear();

                        // Remplir les sélecteurs de date avec les options appropriées
                        populateSelect22p('dayi12p', 1, 31, currentDay2p);
                        populateSelect22p('monthi12p', 1, 12, currentMonth2p);
                        populateSelect22p('yeari12p', 2020, 2030, currentYear2p);


                        // Ajouter des écouteurs d'événements change aux sélecteurs de date
                        document.getElementById('dayi12p').addEventListener('change', fetchChart42pData);
                        document.getElementById('monthi12p').addEventListener('change', fetchChart42pData);
                        document.getElementById('yeari12p').addEventListener('change', fetchChart42pData);

                        // Afficher les données du jour actuel au chargement de la page
                        fetchChart42pData();
                    });

                    function fetchChart42pData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        const selectedDay2p = document.getElementById('dayi12p').value;
                        const selectedMonth2p = document.getElementById('monthi12p').value;
                        const selectedYear2p = document.getElementById('yeari12p').value;

                        fetch(`/chart42p?trackingId=${trackingId}&dayi2p=${selectedDay2p}&monthi2p=${selectedMonth2p}&yeari2p=${selectedYear2p}`)
                            .then(response => response.json())
                            .then(data => {

                                // Récupérer les libellés à partir des données du serveur
                                const labels = data.map(item => item.full_date);
                                const totalPageToday = data.map(item => item.unique_pages_visited);
                                const totalNewPageToday = data.map(item => item.new_pages_today);
                                const totalPagesData = data.map(item => item.returning_pages);

                                // Récupérer le graphique existant ou créer un nouveau
                                const ctx = document.getElementById('trafficChart412p').getContext('2d');
                                if (window.myChartp !== undefined) {
                                    window.myChartp.destroy(); // Détruire le graphique existant pour le reconstruire avec les nouvelles données
                                }
                                window.myChartp = new Chart(ctx, {
                                    type: 'bar',
                                    data: {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Pages Totales',
                                            data: totalPageToday,
                                            backgroundColor: 'rgba(255, 206, 86, 0.2)',
                                            borderColor: 'rgba(255, 206, 86, 1)',
                                            borderWidth: 2,
                                            fill: false,
                                            tension: 0.4
                                        }, {
                                            label: 'Pages Visitées Récurrents',
                                            data: totalPagesData,
                                            backgroundColor: 'rgba(218, 112, 214, 0.397)',
                                            borderColor: 'rgb(218, 112, 214)',
                                            borderWidth: 2,
                                            fill: false,
                                            tension: 0.4
                                        }, {
                                            label: 'Neauveaux Pages Visitées',
                                            data: totalNewPageToday,
                                            backgroundColor: 'rgba(255, 0, 255, 0.37)',
                                            borderColor: 'rgb(255, 0, 255)',
                                            borderWidth: 2,
                                            fill: false,
                                            tension: 0.4
                                        }]
                                    },
                                    options: {
                                        scales: {
                                            y: {
                                                beginAtZero: true
                                            }
                                        }
                                    }
                                });
                                const totalCount433p = totalPageToday.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCount433p').innerText = totalCount433p;
                                const totalCount434p = totalPagesData.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCount434p').innerText = totalCount434p;
                                const totalCount432p = totalNewPageToday.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCount432p').innerText = totalCount432p;
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });
                    }

                    function populateSelect22p(id2p, start2p, end2p, selected2p) {
                        const select2p = document.getElementById(id2p); // Utilisation de id2 au lieu de id pour éviter les conflits
                        select2p.innerHTML = '';
                        for (let i = start2p; i <= end2p; i++) {
                            const option2p = document.createElement('option'); // Utilisation de 'option' au lieu de 'option2'
                            option2p.value = i;
                            option2p.textContent = i;
                            if (i === selected2p) {
                                option2p.selected = true; // Correction de 'option.selected2' en 'option2.selected'
                            }
                            select2p.appendChild(option2p);
                        }
                    }

                </script>
            </div>
        </div>
        <div class="boxvisiteursmonthall"><br>
            <div class="boxvisiteursmonth1">
                <p id="liste">Pages Visitées Mensuel</p>
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;

                <style>
                    /* Style pour le select */
                    select[name="months2p"] {
                        width: 100px;
                        padding: 8px;
                        border: 1px solid #ccc;
                        border-radius: 20px;
                        font-size: 14px;
                        text-align: right;
                    }
                </style>
                <select name="months2p" id="months2p">
                    {{#each months}}
                    <option value="{{this.value}}" {{#if this.selected}}selected{{/if}}>
                        {{this.name}}
                    </option>
                    {{/each}}
                </select>
                <div class="boxsummary">
                    <canvas id="trafficChart2p" width="600" height="200"></canvas>
                </div>

                <script>
                    function convertSecondsToHMS_AnotherMonths(seconds) {
                        const hours = Math.floor(seconds / 3600);
                        const minutes = Math.floor((seconds % 3600) / 60);
                        const remainingSeconds = seconds % 60;

                        return `${hours}h ${minutes}m ${remainingSeconds}s`;
                    }

                    function fetchData_AnotherMonthsp(monthp) {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');
                        const currentYearp = new Date().getFullYear();

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        // Effectuer la requête avec les paramètres du mois sélectionné
                        fetch(`/chartnewp?trackingId=${trackingId}&monthp=${monthp}&yearp=${currentYearp}`)
                            .then(response => response.json())
                            .then(data => {
                                // Traiter les données de la première requête
                                const labels = data.results.map(item => item.month);
                                const totalPageToday = data.results.map(item => item.unique_pages_visited);
                                const totalNewPageToday = data.results.map(item => item.new_page_today);
                                const totalReturningPagesData = data.results.map(item => item.returning_pages);

                                // Mettre à jour le graphique avec les nouvelles données
                                const ctx = document.getElementById('trafficChart2p').getContext('2d');
                                if (window.myChart_AnotherMonthsp !== undefined) {
                                    window.myChart_AnotherMonthsp.destroy(); // Détruire le graphique existant pour le reconstruire avec les nouvelles données
                                }
                                window.myChart_AnotherMonthsp = new Chart(ctx, {
                                    type: 'bar',
                                    data: {
                                        labels: labels,
                                        datasets: [{
                                            label: 'Pages Totales',
                                            data: totalPageToday,
                                            backgroundColor: 'rgba(255, 207, 86, 0.322)',
                                            borderColor: 'rgba(255, 206, 86, 1)',
                                            borderWidth: 2,
                                            fill: true,
                                            tension: 0.4
                                        }, {
                                            label: 'Pages Visitées Récurrents',
                                            data: totalReturningPagesData,
                                            backgroundColor: 'rgba(218, 112, 214, 0.397)',
                                            borderColor: 'rgb(218, 112, 214)',
                                            borderWidth: 2,
                                            fill: false,
                                            tension: 0.4
                                        }, {
                                            label: 'Neauveaux Pages Visitées',
                                            data: totalNewPageToday,
                                            backgroundColor: 'rgba(255, 0, 255, 0.37)',
                                            borderColor: 'rgb(255, 0, 255)',
                                            borderWidth: 2,
                                            fill: true,
                                            tension: 0.4
                                        }]
                                    },
                                    options: {
                                        scales: {
                                            y: {
                                                beginAtZero: true
                                            }
                                        }
                                    }
                                });

                                const totalCountnewp = totalPageToday.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCountnewp').innerText = totalCountnewp;

                                const totalCountnew2p = totalNewPageToday.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCountnew2p').innerText = totalCountnew2p;

                                const totalCountnew33p = totalReturningPagesData.reduce((acc, curr) => acc + curr, 0);
                                document.getElementById('totalCountnew33p').innerText = totalCountnew33p;

                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite:', error);
                                // Ajouter un message d'erreur à l'utilisateur
                                document.getElementById('error-message').innerText = "Une erreur s'est produite lors du chargement des données.";
                            });
                    }

                    document.addEventListener('DOMContentLoaded', () => {
                        // Récupérer la valeur initiale du mois
                        const selected = document.getElementById('months2p').value;
                        fetchData_AnotherMonthsp(selected);

                        // Gestionnaire d'événements pour le changement de mois sélectionné
                        document.getElementById('months2p').addEventListener('change', (event) => {
                            const selected = event.target.value;
                            fetchData_AnotherMonthsp(selected);
                        });
                    });
                </script>


                <div class="box111">
                    Pages Totales: <br><span class="num" id="totalCountnewp"></span>
                </div>
                <div class="box1 purple">
                    Pages Visitées Récurrents: <br><span class="num" id="totalCountnew33p"></span>
                </div>
                <div class="box1 pink">
                    Neauveaux Pages Visitées: <br><span class="num" id="totalCountnew2p"></span>
                </div>

            </div>
        </div>
    </div><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>

    <div class="wrapper" id="div9">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">Trafic des Pages</p>
                <div class="boxvisiteursactivity1">
                    <style>
                        .pageright {
                            position: absolute;
                            width: 25%;
                            margin-left: 10%;
                            margin-top: 7%;
                        }
                    </style>
                    <img class="pageright" src="./img/accuielp.jpg">
                    <div class="chart-containertraficPage">
                        <div id="tablePage"></div>
                    </div>
                    <script src="chartpage.js"></script>
                </div>
            </div>
        </div><br><br><br>
    </div>

    <div class="wrapper" id="div10">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    La page avec le plus nombre
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    La page avec le moins nombre
                </p>
                <div class="boxpage">
                    <canvas id="pageChart1" width="400" height="400"></canvas>
                </div>
                <script>
                    function fetchChartPageData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        fetch(`/chartpage?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                // Trouver la page avec le plus grand nombre de visiteurs
                                const pageWithMaxVisits = data.reduce((maxPage, currentPage) => (currentPage.unique_userAgent > maxPage.unique_userAgent) ? currentPage : maxPage);

                                // Extraire les données pour le graphique
                                const pages = data.map(item => item.page);
                                const uniqueUserAgents = data.map(item => item.unique_userAgent);

                                // Créer un tableau de couleurs pour chaque page
                                const backgroundColors = pages.map(page => (page === pageWithMaxVisits.page) ? '#fc05c6' : 'rgb(245, 226, 60)');
                                const borderColors = pages.map(page => (page === pageWithMaxVisits.page) ? 'rgb(255, 255, 255)' : 'rgb(245, 226, 60)');

                                // Créer un tableau pour les largeurs de bordure
                                const borderWidths = pages.map(page => (page === pageWithMaxVisits.page) ? 3 : 1);
                                const hoverOffsets = pages.map(page => (page === pageWithMaxVisits.page) ? 15 : 0);

                                const ctx = document.getElementById('pageChart1').getContext('2d');
                                const myChart = new Chart(ctx, {
                                    type: 'doughnut',
                                    data: {
                                        datasets: [{
                                            label: 'Nombre de Visiteurs',
                                            data: uniqueUserAgents,
                                            backgroundColor: backgroundColors,
                                            borderColor: borderColors,
                                            borderWidth: borderWidths
                                        }]
                                    },
                                });

                                const totalCountPage = pageWithMaxVisits.page;
                                const totalCountVisiteurs = pageWithMaxVisits.unique_userAgent;
                                document.getElementById('totalCountPage1').innerHTML = `${totalCountPage} :: ${totalCountVisiteurs}`;
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });

                    }
                    document.addEventListener('DOMContentLoaded', fetchChartPageData);
                </script>

                <div class="boxpage">
                    <canvas id="pageChart2" width="400" height="400"></canvas>
                </div>
                <script>
                    function fetchChartPageData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        fetch(`/chartpage?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                // Trouver la page avec le plus petit nombre de visiteurs
                                const pageWithMinVisits = data.reduce((minPage, currentPage) => (currentPage.unique_userAgent < minPage.unique_userAgent) ? currentPage : minPage);

                                // Extraire les données pour le graphique
                                const pages = data.map(item => item.page);
                                const uniqueUserAgents = data.map(item => item.unique_userAgent);

                                // Créer un tableau de couleurs pour chaque page
                                const backgroundColors = pages.map(page => (page === pageWithMinVisits.page) ? 'rgb(224, 9, 243)' : 'rgb(245, 226, 60)');
                                const borderColors = pages.map(page => (page === pageWithMinVisits.page) ? 'rgb(255, 255, 255)' : 'rgb(245, 226, 60)');

                                // Créer un tableau pour les largeurs de bordure
                                const borderWidths = pages.map(page => (page === pageWithMinVisits.page) ? 3 : 1);
                                const hoverOffsets = pages.map(page => (page === pageWithMinVisits.page) ? 15 : 0);

                                const ctx = document.getElementById('pageChart2').getContext('2d');
                                const myChart = new Chart(ctx, {
                                    type: 'doughnut',
                                    data: {
                                        datasets: [{
                                            label: 'Nombre de Visiteurs',
                                            data: uniqueUserAgents,
                                            backgroundColor: backgroundColors,
                                            borderColor: borderColors,
                                            borderWidth: borderWidths
                                        }]
                                    },
                                });

                                const totalCountPage = pageWithMinVisits.page;
                                const totalCountVisiteurs = pageWithMinVisits.unique_userAgent;
                                document.getElementById('totalCountPage2').innerHTML = `${totalCountPage} :: ${totalCountVisiteurs}`;
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });

                    }
                    document.addEventListener('DOMContentLoaded', fetchChartPageData);
                </script>
                <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
                <div class="boxpagee">
                    <div class="leftt">
                        <i class="fa fa-pie-chart cerclehalftop"></i><br>
                        La page avec le plus de visiteurs :<br>
                        <span id="totalCountPage1"></span>
                    </div>
                    <div>
                        <i class="fa fa-pie-chart cerclehalfmin"></i><br>
                        La page avec le moins de visiteurs :<br>
                        <span id="totalCountPage2"></span>
                    </div>
                </div>
            </div>
        </div>
    </div><br><br><br>

    <div class="wrapper" id="div11">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    La page avec le plus nombre
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    La page avec le moins nombre
                </p>
                <div class="boxpage">
                    <canvas id="pageChart12" width="400" height="400"></canvas>
                </div>
                <script>
                    function fetchChartPageData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        fetch(`/chartpage?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                // Trouver la page avec le plus grand nombre de visiteurs
                                const pageWithMaxVisits = data.reduce((maxPage, currentPage) => (currentPage.total_visits > maxPage.total_visits) ? currentPage : maxPage);

                                // Extraire les données pour le graphique
                                const pages = data.map(item => item.page);
                                const totalVisits = data.map(item => item.total_visits);

                                // Créer un tableau de couleurs pour chaque page
                                const backgroundColors = pages.map(page => (page === pageWithMaxVisits.page) ? '#fc05c6' : 'rgb(245, 226, 60)');
                                const borderColors = pages.map(page => (page === pageWithMaxVisits.page) ? 'rgb(255, 255, 255)' : 'rgb(245, 226, 60)');

                                // Créer un tableau pour les largeurs de bordure
                                const borderWidths = pages.map(page => (page === pageWithMaxVisits.page) ? 3 : 1);
                                const hoverOffsets = pages.map(page => (page === pageWithMaxVisits.page) ? 15 : 0);

                                const ctx = document.getElementById('pageChart12').getContext('2d');
                                const myChart = new Chart(ctx, {
                                    type: 'doughnut',
                                    data: {
                                        datasets: [{
                                            label: 'Nombre de Vues',
                                            data: totalVisits,
                                            backgroundColor: backgroundColors,
                                            borderColor: borderColors,
                                            borderWidth: borderWidths
                                        }]
                                    },
                                });

                                const totalCountPage = pageWithMaxVisits.page;
                                const totalCountVues = pageWithMaxVisits.total_visits;
                                document.getElementById('totalCountPage12').innerHTML = `${totalCountPage} :: ${totalCountVues}`;
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });

                    }
                    document.addEventListener('DOMContentLoaded', fetchChartPageData);
                </script>

                <div class="boxpage">
                    <canvas id="pageChart22" width="400" height="400"></canvas>
                </div>
                <script>
                    function fetchChartPageData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        fetch(`/chartpage?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                // Trouver la page avec le plus petit nombre de visiteurs
                                const pageWithMinVisits = data.reduce((minPage, currentPage) => (currentPage.total_visits < minPage.total_visits) ? currentPage : minPage);

                                // Extraire les données pour le graphique
                                const pages = data.map(item => item.page);
                                const totalVisits = data.map(item => item.total_visits);

                                // Créer un tableau de couleurs pour chaque page
                                const backgroundColors = pages.map(page => (page === pageWithMinVisits.page) ? 'rgb(224, 9, 243)' : 'rgb(245, 226, 60)');
                                const borderColors = pages.map(page => (page === pageWithMinVisits.page) ? 'rgb(255, 255, 255)' : 'rgb(245, 226, 60)');

                                // Créer un tableau pour les largeurs de bordure
                                const borderWidths = pages.map(page => (page === pageWithMinVisits.page) ? 3 : 1);
                                const hoverOffsets = pages.map(page => (page === pageWithMinVisits.page) ? 15 : 0);

                                const ctx = document.getElementById('pageChart22').getContext('2d');
                                const myChart = new Chart(ctx, {
                                    type: 'doughnut',
                                    data: {
                                        datasets: [{
                                            label: 'Nombre de Vues',
                                            data: totalVisits,
                                            backgroundColor: backgroundColors,
                                            borderColor: borderColors,
                                            borderWidth: borderWidths
                                        }]
                                    },
                                });

                                const totalCountPage = pageWithMinVisits.page;
                                const totalCountVues = pageWithMinVisits.total_visits;
                                document.getElementById('totalCountPage22').innerHTML = `${totalCountPage} :: ${totalCountVues}`;
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });

                    }
                    document.addEventListener('DOMContentLoaded', fetchChartPageData);
                </script>
                <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
                <div class="boxpagee">
                    <div class="leftt">
                        <i class="fa fa-pie-chart cerclehalftop"></i><br>
                        La page avec le plus de vues :<br>
                        <span id="totalCountPage12"></span>
                    </div>
                    <div>
                        <i class="fa fa-pie-chart cerclehalfmin"></i><br>
                        La page avec le moins de vues :<br>
                        <span id="totalCountPage22"></span>
                    </div>
                </div>
            </div>
        </div>
    </div><br><br><br>

    <div class="wrapper" id="div12">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    La page avec le plus nombre
                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                    La page avec le moins nombre
                </p>
                <div class="boxpage">
                    <canvas id="pageChart13" width="400" height="400"></canvas>
                </div>
                <script>
                    function fetchChartPageData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        fetch(`/chartpage?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                // Trouver la page avec le plus grand nombre de visiteurs
                                const pageWithMaxVisits = data.reduce((maxPage, currentPage) => (currentPage.total_clicks > maxPage.total_clicks) ? currentPage : maxPage);

                                // Extraire les données pour le graphique
                                const pages = data.map(item => item.page);
                                const totalClicks = data.map(item => item.total_clicks);

                                // Créer un tableau de couleurs pour chaque page
                                const backgroundColors = pages.map(page => (page === pageWithMaxVisits.page) ? '#fc05c6' : 'rgb(245, 226, 60)');
                                const borderColors = pages.map(page => (page === pageWithMaxVisits.page) ? 'rgb(255, 255, 255)' : 'rgb(245, 226, 60)');

                                // Créer un tableau pour les largeurs de bordure
                                const borderWidths = pages.map(page => (page === pageWithMaxVisits.page) ? 3 : 1);
                                const hoverOffsets = pages.map(page => (page === pageWithMaxVisits.page) ? 15 : 0);

                                const ctx = document.getElementById('pageChart13').getContext('2d');
                                const myChart = new Chart(ctx, {
                                    type: 'doughnut',
                                    data: {
                                        datasets: [{
                                            label: 'Nombre de Clicks',
                                            data: totalClicks,
                                            backgroundColor: backgroundColors,
                                            borderColor: borderColors,
                                            borderWidth: borderWidths
                                        }]
                                    },
                                });

                                const totalCountPage = pageWithMaxVisits.page;
                                const totalCountClicks = pageWithMaxVisits.total_clicks;
                                document.getElementById('totalCountPage13').innerHTML = `${totalCountPage} :: ${totalCountClicks}`;
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });

                    }
                    document.addEventListener('DOMContentLoaded', fetchChartPageData);
                </script>

                <div class="boxpage">
                    <canvas id="pageChart23" width="400" height="400"></canvas>
                </div>
                <script>
                    function fetchChartPageData() {
                        const urlParams = new URLSearchParams(window.location.search);
                        const trackingId = urlParams.get('trackingId');

                        if (!trackingId) {
                            console.error('Aucun tracking_id trouvé dans l\'URL.');
                            return;
                        }

                        fetch(`/chartpage?trackingId=${trackingId}`)
                            .then(response => response.json())
                            .then(data => {
                                // Trouver la page avec le plus petit nombre de visiteurs
                                const pageWithMinVisits = data.reduce((minPage, currentPage) => (currentPage.total_clicks < minPage.total_clicks) ? currentPage : minPage);

                                // Extraire les données pour le graphique
                                const pages = data.map(item => item.page);
                                const totalClicks = data.map(item => item.total_clicks);

                                // Créer un tableau de couleurs pour chaque page
                                const backgroundColors = pages.map(page => (page === pageWithMinVisits.page) ? 'rgb(224, 9, 243)' : 'rgb(245, 226, 60)');
                                const borderColors = pages.map(page => (page === pageWithMinVisits.page) ? 'rgb(255, 255, 255)' : 'rgb(245, 226, 60)');

                                // Créer un tableau pour les largeurs de bordure
                                const borderWidths = pages.map(page => (page === pageWithMinVisits.page) ? 3 : 1);
                                const hoverOffsets = pages.map(page => (page === pageWithMinVisits.page) ? 15 : 0);

                                const ctx = document.getElementById('pageChart23').getContext('2d');
                                const myChart = new Chart(ctx, {
                                    type: 'doughnut',
                                    data: {
                                        datasets: [{
                                            label: 'Nombre de Clicks',
                                            data: totalClicks,
                                            backgroundColor: backgroundColors,
                                            borderColor: borderColors,
                                            borderWidth: borderWidths
                                        }]
                                    },
                                });

                                const totalCountPage = pageWithMinVisits.page;
                                const totalCountClicks = pageWithMinVisits.total_clicks;
                                document.getElementById('totalCountPage23').innerHTML = `${totalCountPage} :: ${totalCountClicks}`;
                            })
                            .catch(error => {
                                console.error('Une erreur s\'est produite lors de la récupération des données:', error);
                            });

                    }
                    document.addEventListener('DOMContentLoaded', fetchChartPageData);
                </script>
                <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>
                <div class="boxpagee">
                    <div class="leftt">
                        <i class="fa fa-pie-chart cerclehalftop"></i><br>
                        La page avec le plus de clicks :<br>
                        <span id="totalCountPage13"></span>
                    </div>
                    <div>
                        <i class="fa fa-pie-chart cerclehalfmin"></i><br>
                        La page avec le moins de clicks :<br>
                        <span id="totalCountPage23"></span>
                    </div>
                </div>
            </div>
        </div>
    </div><br><br><br>

    <div class="wrapper" id="div16">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">Sessions/Durée</p>
                <div class="box5hours">
                    <canvas id="visitorsChart77" width="600" height="400" class="visitors"></canvas>
                    <script>
                        function fetchChart77Data() {
                            const urlParams = new URLSearchParams(window.location.search);
                            const trackingId = urlParams.get('trackingId');

                            if (!trackingId) {
                                console.error('Aucun tracking_id trouvé dans l\'URL.');
                                return;
                            }

                            fetch(`/chart77?trackingId=${trackingId}`)
                                .then(response => response.json())
                                .then(data => {
                                    // Labels pour le graphique
                                    const labels = ['Hier', 'Aujourd\'hui'];
                                    const counts = [data.yesterday.count, data.today.count];

                                    // Créer le graphique
                                    const ctx = document.getElementById('visitorsChart77').getContext('2d');
                                    const visitorsChart = new Chart(ctx, {
                                        type: 'bar',
                                        data: {
                                            labels: labels,
                                            datasets: [
                                                {
                                                    label: 'Nombre de visites',
                                                    data: counts,
                                                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                                                    borderColor: 'rgba(75, 192, 192, 1)',
                                                    borderWidth: 1
                                                }
                                            ]
                                        },
                                        options: {
                                            scales: {
                                                y: {
                                                    beginAtZero: true
                                                }
                                            }
                                        }
                                    });

                                    // Afficher les visiteurs du jour actuel et du jour précédent
                                    document.getElementById('todayVisitors').textContent = `Visiteurs aujourd'hui: ${data.today.count}`;
                                    document.getElementById('yesterdayVisitors').textContent = `Visiteurs hier: ${data.yesterday.count}`;
                                })
                                .catch(error => {
                                    console.error('Une erreur s\'est produite:', error);
                                });
                        }

                        document.addEventListener('DOMContentLoaded', () => {
                            fetchChart77Data();
                        });
                    </script>
                </div>
            </div>
        </div>
    </div><br><br><br>

    <div class="wrapper" id="div13">
        <div class="boxvisiteursinformationsall">
            <div class="boxvisiteursinformations1">
                <p id="liste">Les Cinq Dernières Heures (Sessions || Durée)</p>
                <style>
                    .hoursph {
                        width: 50%;
                        margin-top: 10%;
                    }

                    .chart-container2 {
                        margin-top: 1%;
                        width: 100%;
                        height: 200px;
                        overflow-y: scroll;
                        position: relative;
                        border: 1px solid rgb(218, 218, 218);
                        border-radius: 5px;
                    }

                    .chart-container2::-webkit-scrollbar {
                        width: 6px;
                    }

                    .chart-container2::-webkit-scrollbar-thumb {
                        background-color: rgb(131, 131, 131);
                        border-radius: 5px;
                    }
                </style>
                <img class="hoursph" src="./img/hours.png">
                <div class="box5hours">
                    <canvas id="trafficChart7" width="600" height="400" class="visitors"></canvas>
                    <script src="chart7.js"></script>
                    <div class="chart-container2">
                        <div id="table-container">
                        </div>
                    </div>

                    <script src="chart8.js"></script>
                </div>
            </div>
        </div>
    </div><br><br><br>


</body>


</html>